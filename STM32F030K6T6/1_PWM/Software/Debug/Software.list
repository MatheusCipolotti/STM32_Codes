
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e4  080002ec  000012ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e4  080002e4  000012ec  2**0
                  CONTENTS
  4 .ARM          00000000  080002e4  080002e4  000012ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e4  080002ec  000012ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e4  080002e4  000012e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002e8  080002e8  000012e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000053b  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000208  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000841e  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000119c  00000000  00000000  00009f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002b785  00000000  00000000  0000b0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0003687f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  000368c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00036990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002cc 	.word	0x080002cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002cc 	.word	0x080002cc

08000108 <PWM_TIM1_Config>:
#include "stm32f030x6.h"
#include "PWM.h"

void PWM_TIM1_Config(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	//Ativa clock para TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800010c:	4b19      	ldr	r3, [pc, #100]	@ (8000174 <PWM_TIM1_Config+0x6c>)
 800010e:	699a      	ldr	r2, [r3, #24]
 8000110:	4b18      	ldr	r3, [pc, #96]	@ (8000174 <PWM_TIM1_Config+0x6c>)
 8000112:	2180      	movs	r1, #128	@ 0x80
 8000114:	0109      	lsls	r1, r1, #4
 8000116:	430a      	orrs	r2, r1
 8000118:	619a      	str	r2, [r3, #24]

	//Configura prescaler para definir a frequência do temporizador
	TIM1->PSC = 7999; 													//Prescaler para dividir o clock
 800011a:	4b17      	ldr	r3, [pc, #92]	@ (8000178 <PWM_TIM1_Config+0x70>)
 800011c:	4a17      	ldr	r2, [pc, #92]	@ (800017c <PWM_TIM1_Config+0x74>)
 800011e:	629a      	str	r2, [r3, #40]	@ 0x28

	//Configura o ARR (Auto-Reload Register) para definir a frequência do PWM
	TIM1->ARR = 1000; 													//Define o período (PWM de 1kHz por exemplo)
 8000120:	4b15      	ldr	r3, [pc, #84]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000122:	22fa      	movs	r2, #250	@ 0xfa
 8000124:	0092      	lsls	r2, r2, #2
 8000126:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Configura o CH1 em modo PWM1
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M_Msk); // Limpar bits OC1M
 8000128:	4b13      	ldr	r3, [pc, #76]	@ (8000178 <PWM_TIM1_Config+0x70>)
 800012a:	699a      	ldr	r2, [r3, #24]
 800012c:	4b12      	ldr	r3, [pc, #72]	@ (8000178 <PWM_TIM1_Config+0x70>)
 800012e:	2170      	movs	r1, #112	@ 0x70
 8000130:	438a      	bics	r2, r1
 8000132:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;  	//PWM no CH1
 8000134:	4b10      	ldr	r3, [pc, #64]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000136:	699a      	ldr	r2, [r3, #24]
 8000138:	4b0f      	ldr	r3, [pc, #60]	@ (8000178 <PWM_TIM1_Config+0x70>)
 800013a:	2168      	movs	r1, #104	@ 0x68
 800013c:	430a      	orrs	r2, r1
 800013e:	619a      	str	r2, [r3, #24]

	//Ativa saída do canal 1 (CH1)
	TIM1->CCER |= TIM_CCER_CC1E;   										//Habilita CH1
 8000140:	4b0d      	ldr	r3, [pc, #52]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000142:	6a1a      	ldr	r2, [r3, #32]
 8000144:	4b0c      	ldr	r3, [pc, #48]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000146:	2101      	movs	r1, #1
 8000148:	430a      	orrs	r2, r1
 800014a:	621a      	str	r2, [r3, #32]

	//Configura valor de comparação (duty cycle)
	TIM1->CCR1 = 500; 													//Duty cycle 50% para CH1
 800014c:	4b0a      	ldr	r3, [pc, #40]	@ (8000178 <PWM_TIM1_Config+0x70>)
 800014e:	22fa      	movs	r2, #250	@ 0xfa
 8000150:	0052      	lsls	r2, r2, #1
 8000152:	635a      	str	r2, [r3, #52]	@ 0x34

	//Ativa o contador e a saída principal
	TIM1->BDTR |= TIM_BDTR_MOE;    // Ativar saídas principais
 8000154:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000156:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000158:	4b07      	ldr	r3, [pc, #28]	@ (8000178 <PWM_TIM1_Config+0x70>)
 800015a:	2180      	movs	r1, #128	@ 0x80
 800015c:	0209      	lsls	r1, r1, #8
 800015e:	430a      	orrs	r2, r1
 8000160:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->CR1 |= TIM_CR1_CEN;      // Ativar contador
 8000162:	4b05      	ldr	r3, [pc, #20]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000164:	681a      	ldr	r2, [r3, #0]
 8000166:	4b04      	ldr	r3, [pc, #16]	@ (8000178 <PWM_TIM1_Config+0x70>)
 8000168:	2101      	movs	r1, #1
 800016a:	430a      	orrs	r2, r1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	46c0      	nop			@ (mov r8, r8)
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40021000 	.word	0x40021000
 8000178:	40012c00 	.word	0x40012c00
 800017c:	00001f3f 	.word	0x00001f3f

08000180 <OscInit>:
#include "stm32f030x6.h"
#include "configs.h"

void OscInit(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	//Ativa o HSE (Cristal Externo de 8 MHz)
	RCC->CR |= RCC_CR_HSEON;
 8000184:	4b0f      	ldr	r3, [pc, #60]	@ (80001c4 <OscInit+0x44>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b0e      	ldr	r3, [pc, #56]	@ (80001c4 <OscInit+0x44>)
 800018a:	2180      	movs	r1, #128	@ 0x80
 800018c:	0249      	lsls	r1, r1, #9
 800018e:	430a      	orrs	r2, r1
 8000190:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); 						//Espera até o HSE ficar pronto
 8000192:	46c0      	nop			@ (mov r8, r8)
 8000194:	4b0b      	ldr	r3, [pc, #44]	@ (80001c4 <OscInit+0x44>)
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	2380      	movs	r3, #128	@ 0x80
 800019a:	029b      	lsls	r3, r3, #10
 800019c:	4013      	ands	r3, r2
 800019e:	d0f9      	beq.n	8000194 <OscInit+0x14>

	//Seleciona o HSE como o clock do sistema
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 80001a0:	4b08      	ldr	r3, [pc, #32]	@ (80001c4 <OscInit+0x44>)
 80001a2:	685a      	ldr	r2, [r3, #4]
 80001a4:	4b07      	ldr	r3, [pc, #28]	@ (80001c4 <OscInit+0x44>)
 80001a6:	2101      	movs	r1, #1
 80001a8:	430a      	orrs	r2, r1
 80001aa:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE); 	//Espera até o HSE ser selecionado
 80001ac:	46c0      	nop			@ (mov r8, r8)
 80001ae:	4b05      	ldr	r3, [pc, #20]	@ (80001c4 <OscInit+0x44>)
 80001b0:	685b      	ldr	r3, [r3, #4]
 80001b2:	220c      	movs	r2, #12
 80001b4:	4013      	ands	r3, r2
 80001b6:	2b04      	cmp	r3, #4
 80001b8:	d1f9      	bne.n	80001ae <OscInit+0x2e>
}
 80001ba:	46c0      	nop			@ (mov r8, r8)
 80001bc:	46c0      	nop			@ (mov r8, r8)
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	46c0      	nop			@ (mov r8, r8)
 80001c4:	40021000 	.word	0x40021000

080001c8 <GPIO>:

void GPIO(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	//Ativa clock para GPIOA
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <GPIO+0x4c>)
 80001ce:	695a      	ldr	r2, [r3, #20]
 80001d0:	4b10      	ldr	r3, [pc, #64]	@ (8000214 <GPIO+0x4c>)
 80001d2:	2180      	movs	r1, #128	@ 0x80
 80001d4:	0289      	lsls	r1, r1, #10
 80001d6:	430a      	orrs	r2, r1
 80001d8:	615a      	str	r2, [r3, #20]

	//Configura PA8 como saída alternativa para TIM1_CH1 (AF2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER8);
 80001da:	2390      	movs	r3, #144	@ 0x90
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	2390      	movs	r3, #144	@ 0x90
 80001e2:	05db      	lsls	r3, r3, #23
 80001e4:	490c      	ldr	r1, [pc, #48]	@ (8000218 <GPIO+0x50>)
 80001e6:	400a      	ands	r2, r1
 80001e8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER8_1); 						//PA8 em modo função alternativa
 80001ea:	2390      	movs	r3, #144	@ 0x90
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	2390      	movs	r3, #144	@ 0x90
 80001f2:	05db      	lsls	r3, r3, #23
 80001f4:	2180      	movs	r1, #128	@ 0x80
 80001f6:	0289      	lsls	r1, r1, #10
 80001f8:	430a      	orrs	r2, r1
 80001fa:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= (0x02 << GPIO_AFRH_AFRH0_Pos); 			//AF2 para PA8
 80001fc:	2390      	movs	r3, #144	@ 0x90
 80001fe:	05db      	lsls	r3, r3, #23
 8000200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000202:	2390      	movs	r3, #144	@ 0x90
 8000204:	05db      	lsls	r3, r3, #23
 8000206:	2102      	movs	r1, #2
 8000208:	430a      	orrs	r2, r1
 800020a:	625a      	str	r2, [r3, #36]	@ 0x24


}
 800020c:	46c0      	nop			@ (mov r8, r8)
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	40021000 	.word	0x40021000
 8000218:	fffcffff 	.word	0xfffcffff

0800021c <main>:

#include "delay.h"
#include "configs.h"
#include "PWM.h"

int main(){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	OscInit();
 8000220:	f7ff ffae 	bl	8000180 <OscInit>
	GPIO();
 8000224:	f7ff ffd0 	bl	80001c8 <GPIO>
	PWM_TIM1_Config();
 8000228:	f7ff ff6e 	bl	8000108 <PWM_TIM1_Config>

	while(1){
 800022c:	46c0      	nop			@ (mov r8, r8)
 800022e:	e7fd      	b.n	800022c <main+0x10>

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	@ (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	e000      	b.n	8000238 <Reset_Handler+0x8>
 8000236:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	@ (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	@ (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	@ (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	@ (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 f811 	bl	8000284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ffdb 	bl	800021c <main>

08000266 <LoopForever>:

LoopForever:
  b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	080002ec 	.word	0x080002ec
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC_IRQHandler>
	...

08000284 <__libc_init_array>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	2600      	movs	r6, #0
 8000288:	4c0c      	ldr	r4, [pc, #48]	@ (80002bc <__libc_init_array+0x38>)
 800028a:	4d0d      	ldr	r5, [pc, #52]	@ (80002c0 <__libc_init_array+0x3c>)
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	10a4      	asrs	r4, r4, #2
 8000290:	42a6      	cmp	r6, r4
 8000292:	d109      	bne.n	80002a8 <__libc_init_array+0x24>
 8000294:	2600      	movs	r6, #0
 8000296:	f000 f819 	bl	80002cc <_init>
 800029a:	4c0a      	ldr	r4, [pc, #40]	@ (80002c4 <__libc_init_array+0x40>)
 800029c:	4d0a      	ldr	r5, [pc, #40]	@ (80002c8 <__libc_init_array+0x44>)
 800029e:	1b64      	subs	r4, r4, r5
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	42a6      	cmp	r6, r4
 80002a4:	d105      	bne.n	80002b2 <__libc_init_array+0x2e>
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	00b3      	lsls	r3, r6, #2
 80002aa:	58eb      	ldr	r3, [r5, r3]
 80002ac:	4798      	blx	r3
 80002ae:	3601      	adds	r6, #1
 80002b0:	e7ee      	b.n	8000290 <__libc_init_array+0xc>
 80002b2:	00b3      	lsls	r3, r6, #2
 80002b4:	58eb      	ldr	r3, [r5, r3]
 80002b6:	4798      	blx	r3
 80002b8:	3601      	adds	r6, #1
 80002ba:	e7f2      	b.n	80002a2 <__libc_init_array+0x1e>
 80002bc:	080002e4 	.word	0x080002e4
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e4 	.word	0x080002e4

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr
