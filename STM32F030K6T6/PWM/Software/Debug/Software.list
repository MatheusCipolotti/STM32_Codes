
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  0800047c  0000147c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000474  08000474  0000147c  2**0
                  CONTENTS
  4 .ARM          00000000  08000474  08000474  0000147c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000474  0800047c  0000147c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000474  08000474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000147c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800047c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800047c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000053b  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000208  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005a  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000841e  00000000  00000000  00001cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000125c  00000000  00000000  0000a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002b7af  00000000  00000000  0000b34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00036afb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  00036b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00036c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800045c 	.word	0x0800045c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800045c 	.word	0x0800045c

08000108 <PWM_TIM1_Config>:
#include "stm32f030x6.h"
#include "PWM.h"

void PWM_TIM1_Config(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	//Ativa clock para TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800010c:	4b39      	ldr	r3, [pc, #228]	@ (80001f4 <PWM_TIM1_Config+0xec>)
 800010e:	699a      	ldr	r2, [r3, #24]
 8000110:	4b38      	ldr	r3, [pc, #224]	@ (80001f4 <PWM_TIM1_Config+0xec>)
 8000112:	2180      	movs	r1, #128	@ 0x80
 8000114:	0109      	lsls	r1, r1, #4
 8000116:	430a      	orrs	r2, r1
 8000118:	619a      	str	r2, [r3, #24]

	//Configura prescaler para definir a frequência do temporizador
	TIM1->PSC = 7; 														//Prescaler para dividir o clock
 800011a:	4b37      	ldr	r3, [pc, #220]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800011c:	2207      	movs	r2, #7
 800011e:	629a      	str	r2, [r3, #40]	@ 0x28

	//Configura o ARR (Auto-Reload Register) para definir a frequência do PWM
	TIM1->ARR = 999; 													//Define o período (PWM de 1kHz por exemplo)
 8000120:	4b35      	ldr	r3, [pc, #212]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000122:	4a36      	ldr	r2, [pc, #216]	@ (80001fc <PWM_TIM1_Config+0xf4>)
 8000124:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Configura cada canal para modo PWM1
	//Canal 1
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M_Msk);
 8000126:	4b34      	ldr	r3, [pc, #208]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000128:	699a      	ldr	r2, [r3, #24]
 800012a:	4b33      	ldr	r3, [pc, #204]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800012c:	2170      	movs	r1, #112	@ 0x70
 800012e:	438a      	bics	r2, r1
 8000130:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 8000132:	4b31      	ldr	r3, [pc, #196]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000134:	699a      	ldr	r2, [r3, #24]
 8000136:	4b30      	ldr	r3, [pc, #192]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000138:	2168      	movs	r1, #104	@ 0x68
 800013a:	430a      	orrs	r2, r1
 800013c:	619a      	str	r2, [r3, #24]

	//Canal 2
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC2M_Msk);
 800013e:	4b2e      	ldr	r3, [pc, #184]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000140:	699a      	ldr	r2, [r3, #24]
 8000142:	4b2d      	ldr	r3, [pc, #180]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000144:	492e      	ldr	r1, [pc, #184]	@ (8000200 <PWM_TIM1_Config+0xf8>)
 8000146:	400a      	ands	r2, r1
 8000148:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (0b110 << TIM_CCMR1_OC2M_Pos) | TIM_CCMR1_OC2PE;
 800014a:	4b2b      	ldr	r3, [pc, #172]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800014c:	699a      	ldr	r2, [r3, #24]
 800014e:	4b2a      	ldr	r3, [pc, #168]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000150:	21d0      	movs	r1, #208	@ 0xd0
 8000152:	01c9      	lsls	r1, r1, #7
 8000154:	430a      	orrs	r2, r1
 8000156:	619a      	str	r2, [r3, #24]

	//Canal 3
	TIM1->CCMR2 &= ~(TIM_CCMR2_OC3M_Msk);
 8000158:	4b27      	ldr	r3, [pc, #156]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800015a:	69da      	ldr	r2, [r3, #28]
 800015c:	4b26      	ldr	r3, [pc, #152]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800015e:	2170      	movs	r1, #112	@ 0x70
 8000160:	438a      	bics	r2, r1
 8000162:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos) | TIM_CCMR2_OC3PE;
 8000164:	4b24      	ldr	r3, [pc, #144]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000166:	69da      	ldr	r2, [r3, #28]
 8000168:	4b23      	ldr	r3, [pc, #140]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800016a:	2168      	movs	r1, #104	@ 0x68
 800016c:	430a      	orrs	r2, r1
 800016e:	61da      	str	r2, [r3, #28]

	//Ativa as saídas PWM
	TIM1->CCER |= TIM_CCER_CC1E;   										//Habilita CH1
 8000170:	4b21      	ldr	r3, [pc, #132]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000172:	6a1a      	ldr	r2, [r3, #32]
 8000174:	4b20      	ldr	r3, [pc, #128]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000176:	2101      	movs	r1, #1
 8000178:	430a      	orrs	r2, r1
 800017a:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC1NE;  										//Habilita CH1N
 800017c:	4b1e      	ldr	r3, [pc, #120]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800017e:	6a1a      	ldr	r2, [r3, #32]
 8000180:	4b1d      	ldr	r3, [pc, #116]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000182:	2104      	movs	r1, #4
 8000184:	430a      	orrs	r2, r1
 8000186:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2E;										//Habilita CH2
 8000188:	4b1b      	ldr	r3, [pc, #108]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800018a:	6a1a      	ldr	r2, [r3, #32]
 800018c:	4b1a      	ldr	r3, [pc, #104]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800018e:	2110      	movs	r1, #16
 8000190:	430a      	orrs	r2, r1
 8000192:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2NE;										//Habilita CH2N
 8000194:	4b18      	ldr	r3, [pc, #96]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 8000196:	6a1a      	ldr	r2, [r3, #32]
 8000198:	4b17      	ldr	r3, [pc, #92]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 800019a:	2140      	movs	r1, #64	@ 0x40
 800019c:	430a      	orrs	r2, r1
 800019e:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3E;										//Habilita CH3
 80001a0:	4b15      	ldr	r3, [pc, #84]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001a2:	6a1a      	ldr	r2, [r3, #32]
 80001a4:	4b14      	ldr	r3, [pc, #80]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001a6:	2180      	movs	r1, #128	@ 0x80
 80001a8:	0049      	lsls	r1, r1, #1
 80001aa:	430a      	orrs	r2, r1
 80001ac:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3NE;										//Habilita CH3N
 80001ae:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001b0:	6a1a      	ldr	r2, [r3, #32]
 80001b2:	4b11      	ldr	r3, [pc, #68]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001b4:	2180      	movs	r1, #128	@ 0x80
 80001b6:	00c9      	lsls	r1, r1, #3
 80001b8:	430a      	orrs	r2, r1
 80001ba:	621a      	str	r2, [r3, #32]

	//Configura valor de comparação (duty cycle)
	TIM1->CCR1 = 500; 													//Duty cycle 50% para CH1
 80001bc:	4b0e      	ldr	r3, [pc, #56]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001be:	22fa      	movs	r2, #250	@ 0xfa
 80001c0:	0052      	lsls	r2, r2, #1
 80001c2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 = 500; 													//Duty cycle 50% para CH2
 80001c4:	4b0c      	ldr	r3, [pc, #48]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001c6:	22fa      	movs	r2, #250	@ 0xfa
 80001c8:	0052      	lsls	r2, r2, #1
 80001ca:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = 500; 													//Duty cycle 50% para CH3
 80001cc:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001ce:	22fa      	movs	r2, #250	@ 0xfa
 80001d0:	0052      	lsls	r2, r2, #1
 80001d2:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Ativa o contador e a saída principal
	TIM1->BDTR |= TIM_BDTR_MOE;    										//Ativa as saídas principais
 80001d4:	4b08      	ldr	r3, [pc, #32]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001da:	2180      	movs	r1, #128	@ 0x80
 80001dc:	0209      	lsls	r1, r1, #8
 80001de:	430a      	orrs	r2, r1
 80001e0:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->CR1 |= TIM_CR1_CEN;      										//Ativa o contador
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	4b04      	ldr	r3, [pc, #16]	@ (80001f8 <PWM_TIM1_Config+0xf0>)
 80001e8:	2101      	movs	r1, #1
 80001ea:	430a      	orrs	r2, r1
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	46c0      	nop			@ (mov r8, r8)
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40012c00 	.word	0x40012c00
 80001fc:	000003e7 	.word	0x000003e7
 8000200:	ffff8fff 	.word	0xffff8fff

08000204 <OscInit>:
#include "stm32f030x6.h"
#include "configs.h"

void OscInit(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	//Ativa o HSE (Cristal Externo de 8 MHz)
	RCC->CR |= RCC_CR_HSEON;
 8000208:	4b0f      	ldr	r3, [pc, #60]	@ (8000248 <OscInit+0x44>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <OscInit+0x44>)
 800020e:	2180      	movs	r1, #128	@ 0x80
 8000210:	0249      	lsls	r1, r1, #9
 8000212:	430a      	orrs	r2, r1
 8000214:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); 								//Espera até o HSE ficar pronto
 8000216:	46c0      	nop			@ (mov r8, r8)
 8000218:	4b0b      	ldr	r3, [pc, #44]	@ (8000248 <OscInit+0x44>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	2380      	movs	r3, #128	@ 0x80
 800021e:	029b      	lsls	r3, r3, #10
 8000220:	4013      	ands	r3, r2
 8000222:	d0f9      	beq.n	8000218 <OscInit+0x14>

	//Seleciona o HSE como o clock do sistema
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000224:	4b08      	ldr	r3, [pc, #32]	@ (8000248 <OscInit+0x44>)
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <OscInit+0x44>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE); 			//Espera até o HSE ser selecionado
 8000230:	46c0      	nop			@ (mov r8, r8)
 8000232:	4b05      	ldr	r3, [pc, #20]	@ (8000248 <OscInit+0x44>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	220c      	movs	r2, #12
 8000238:	4013      	ands	r3, r2
 800023a:	2b04      	cmp	r3, #4
 800023c:	d1f9      	bne.n	8000232 <OscInit+0x2e>
}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	40021000 	.word	0x40021000

0800024c <GPIO>:

void GPIO(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	//Ativa o clock para o GPIOA
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000250:	4b4f      	ldr	r3, [pc, #316]	@ (8000390 <GPIO+0x144>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	4b4e      	ldr	r3, [pc, #312]	@ (8000390 <GPIO+0x144>)
 8000256:	2180      	movs	r1, #128	@ 0x80
 8000258:	0289      	lsls	r1, r1, #10
 800025a:	430a      	orrs	r2, r1
 800025c:	615a      	str	r2, [r3, #20]

	//Configura o PA8 como saida alternativa para o TIM1_CH1 (AF2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER8);
 800025e:	2390      	movs	r3, #144	@ 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	2390      	movs	r3, #144	@ 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	494a      	ldr	r1, [pc, #296]	@ (8000394 <GPIO+0x148>)
 800026a:	400a      	ands	r2, r1
 800026c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER8_1); 								//PA8 em modo função alternativa
 800026e:	2390      	movs	r3, #144	@ 0x90
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	2390      	movs	r3, #144	@ 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2180      	movs	r1, #128	@ 0x80
 800027a:	0289      	lsls	r1, r1, #10
 800027c:	430a      	orrs	r2, r1
 800027e:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= (0x02 << GPIO_AFRH_AFRH0_Pos); 					//AF2 para PA8
 8000280:	2390      	movs	r3, #144	@ 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000286:	2390      	movs	r3, #144	@ 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2102      	movs	r1, #2
 800028c:	430a      	orrs	r2, r1
 800028e:	625a      	str	r2, [r3, #36]	@ 0x24

	//Configura o PA9 como saida alternativa para  o TIM1_CH2 (AF2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER9);
 8000290:	2390      	movs	r3, #144	@ 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	2390      	movs	r3, #144	@ 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	493f      	ldr	r1, [pc, #252]	@ (8000398 <GPIO+0x14c>)
 800029c:	400a      	ands	r2, r1
 800029e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER9_1); 								//PA9 em modo função alternativa
 80002a0:	2390      	movs	r3, #144	@ 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	2390      	movs	r3, #144	@ 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2180      	movs	r1, #128	@ 0x80
 80002ac:	0309      	lsls	r1, r1, #12
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= (0x02 << GPIO_AFRH_AFRH1_Pos); 					//AF2 para PA9
 80002b2:	2390      	movs	r3, #144	@ 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002b8:	2390      	movs	r3, #144	@ 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2120      	movs	r1, #32
 80002be:	430a      	orrs	r2, r1
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24

	//Configura o PA10 como saida alternativa para o TIM1_CH3 (AF2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER10);
 80002c2:	2390      	movs	r3, #144	@ 0x90
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	2390      	movs	r3, #144	@ 0x90
 80002ca:	05db      	lsls	r3, r3, #23
 80002cc:	4933      	ldr	r1, [pc, #204]	@ (800039c <GPIO+0x150>)
 80002ce:	400a      	ands	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER10_1); 							//PA10 em modo função alternativa
 80002d2:	2390      	movs	r3, #144	@ 0x90
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	2390      	movs	r3, #144	@ 0x90
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	2180      	movs	r1, #128	@ 0x80
 80002de:	0389      	lsls	r1, r1, #14
 80002e0:	430a      	orrs	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= (0x02 << GPIO_AFRH_AFRH2_Pos); 					//AF2 para PA10
 80002e4:	2390      	movs	r3, #144	@ 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002ea:	2390      	movs	r3, #144	@ 0x90
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2180      	movs	r1, #128	@ 0x80
 80002f0:	0089      	lsls	r1, r1, #2
 80002f2:	430a      	orrs	r2, r1
 80002f4:	625a      	str	r2, [r3, #36]	@ 0x24

	//Ativa o clock para o GPIOB
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80002f6:	4b26      	ldr	r3, [pc, #152]	@ (8000390 <GPIO+0x144>)
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	4b25      	ldr	r3, [pc, #148]	@ (8000390 <GPIO+0x144>)
 80002fc:	2180      	movs	r1, #128	@ 0x80
 80002fe:	02c9      	lsls	r1, r1, #11
 8000300:	430a      	orrs	r2, r1
 8000302:	615a      	str	r2, [r3, #20]

	//Configura o PB13 como saida alternativa para o TIM1_CH1N (AF2)
	GPIOB->MODER &= ~(GPIO_MODER_MODER13);
 8000304:	4b26      	ldr	r3, [pc, #152]	@ (80003a0 <GPIO+0x154>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b25      	ldr	r3, [pc, #148]	@ (80003a0 <GPIO+0x154>)
 800030a:	4926      	ldr	r1, [pc, #152]	@ (80003a4 <GPIO+0x158>)
 800030c:	400a      	ands	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER13_1); 							//PB13 em modo função alternativa
 8000310:	2390      	movs	r3, #144	@ 0x90
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	2390      	movs	r3, #144	@ 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2180      	movs	r1, #128	@ 0x80
 800031c:	0509      	lsls	r1, r1, #20
 800031e:	430a      	orrs	r2, r1
 8000320:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[1] |= (0x02 << GPIO_AFRH_AFRH5_Pos); 					//AF2 para PB13
 8000322:	4b1f      	ldr	r3, [pc, #124]	@ (80003a0 <GPIO+0x154>)
 8000324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000326:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <GPIO+0x154>)
 8000328:	2180      	movs	r1, #128	@ 0x80
 800032a:	0389      	lsls	r1, r1, #14
 800032c:	430a      	orrs	r2, r1
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24

	//Configura o PB14 como saida alternativa para o TIM1_CH2N (AF2)
	GPIOB->MODER &= ~(GPIO_MODER_MODER14);
 8000330:	4b1b      	ldr	r3, [pc, #108]	@ (80003a0 <GPIO+0x154>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b1a      	ldr	r3, [pc, #104]	@ (80003a0 <GPIO+0x154>)
 8000336:	491c      	ldr	r1, [pc, #112]	@ (80003a8 <GPIO+0x15c>)
 8000338:	400a      	ands	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER14_1); 							//PB14 em modo função alternativa
 800033c:	2390      	movs	r3, #144	@ 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	2390      	movs	r3, #144	@ 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2180      	movs	r1, #128	@ 0x80
 8000348:	0589      	lsls	r1, r1, #22
 800034a:	430a      	orrs	r2, r1
 800034c:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[1] |= (0x02 << GPIO_AFRH_AFRH6_Pos); 					//AF2 para PB14
 800034e:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <GPIO+0x154>)
 8000350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <GPIO+0x154>)
 8000354:	2180      	movs	r1, #128	@ 0x80
 8000356:	0489      	lsls	r1, r1, #18
 8000358:	430a      	orrs	r2, r1
 800035a:	625a      	str	r2, [r3, #36]	@ 0x24

	//Configura o PB15 como saida alternativa para o TIM1_CH2N (AF2)
	GPIOB->MODER &= ~(GPIO_MODER_MODER15);
 800035c:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <GPIO+0x154>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <GPIO+0x154>)
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	0892      	lsrs	r2, r2, #2
 8000366:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER15_1); 							//PB15 em modo função alternativa
 8000368:	2390      	movs	r3, #144	@ 0x90
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	2390      	movs	r3, #144	@ 0x90
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	2180      	movs	r1, #128	@ 0x80
 8000374:	0609      	lsls	r1, r1, #24
 8000376:	430a      	orrs	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
	GPIOB->AFR[1] |= (0x02 << GPIO_AFRH_AFRH7_Pos); 					//AF2 para PB15
 800037a:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <GPIO+0x154>)
 800037c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800037e:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <GPIO+0x154>)
 8000380:	2180      	movs	r1, #128	@ 0x80
 8000382:	0589      	lsls	r1, r1, #22
 8000384:	430a      	orrs	r2, r1
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000388:	46c0      	nop			@ (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	40021000 	.word	0x40021000
 8000394:	fffcffff 	.word	0xfffcffff
 8000398:	fff3ffff 	.word	0xfff3ffff
 800039c:	ffcfffff 	.word	0xffcfffff
 80003a0:	48000400 	.word	0x48000400
 80003a4:	f3ffffff 	.word	0xf3ffffff
 80003a8:	cfffffff 	.word	0xcfffffff

080003ac <main>:

#include "delay.h"
#include "configs.h"
#include "PWM.h"

int main(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	OscInit();
 80003b0:	f7ff ff28 	bl	8000204 <OscInit>
	GPIO();
 80003b4:	f7ff ff4a 	bl	800024c <GPIO>
	PWM_TIM1_Config();
 80003b8:	f7ff fea6 	bl	8000108 <PWM_TIM1_Config>

	while(1){
 80003bc:	46c0      	nop			@ (mov r8, r8)
 80003be:	e7fd      	b.n	80003bc <main+0x10>

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	@ (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	e000      	b.n	80003c8 <Reset_Handler+0x8>
 80003c6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	@ (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	@ (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	@ (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 f811 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ffdb 	bl	80003ac <main>

080003f6 <LoopForever>:

LoopForever:
  b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000404:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 8000408:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800040c:	2000001c 	.word	0x2000001c

08000410 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	2600      	movs	r6, #0
 8000418:	4c0c      	ldr	r4, [pc, #48]	@ (800044c <__libc_init_array+0x38>)
 800041a:	4d0d      	ldr	r5, [pc, #52]	@ (8000450 <__libc_init_array+0x3c>)
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	2600      	movs	r6, #0
 8000426:	f000 f819 	bl	800045c <_init>
 800042a:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <__libc_init_array+0x40>)
 800042c:	4d0a      	ldr	r5, [pc, #40]	@ (8000458 <__libc_init_array+0x44>)
 800042e:	1b64      	subs	r4, r4, r5
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	00b3      	lsls	r3, r6, #2
 800043a:	58eb      	ldr	r3, [r5, r3]
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	00b3      	lsls	r3, r6, #2
 8000444:	58eb      	ldr	r3, [r5, r3]
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000478 	.word	0x08000478
 8000458:	08000474 	.word	0x08000474

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
