
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00001330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00001330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800032c  0800032c  0000132c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000330  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000330  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000053b  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000208  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005a  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000841e  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011ba  00000000  00000000  00009fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002b7af  00000000  00000000  0000b162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00036911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  00036954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00036a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000310 	.word	0x08000310

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000310 	.word	0x08000310

08000108 <PWM_TIM1_Config>:
#include "stm32f030x6.h"
#include "PWM.h"

void PWM_TIM1_Config(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	//Ativa clock para TIM1
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800010c:	4b1c      	ldr	r3, [pc, #112]	@ (8000180 <PWM_TIM1_Config+0x78>)
 800010e:	699a      	ldr	r2, [r3, #24]
 8000110:	4b1b      	ldr	r3, [pc, #108]	@ (8000180 <PWM_TIM1_Config+0x78>)
 8000112:	2180      	movs	r1, #128	@ 0x80
 8000114:	0109      	lsls	r1, r1, #4
 8000116:	430a      	orrs	r2, r1
 8000118:	619a      	str	r2, [r3, #24]

	//Configura prescaler para definir a frequência do temporizador
	TIM1->PSC = 7; 														//Prescaler para dividir o clock
 800011a:	4b1a      	ldr	r3, [pc, #104]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 800011c:	2207      	movs	r2, #7
 800011e:	629a      	str	r2, [r3, #40]	@ 0x28

	//Configura o ARR (Auto-Reload Register) para definir a frequência do PWM
	TIM1->ARR = 999; 													//Define o período (PWM de 1kHz por exemplo)
 8000120:	4b18      	ldr	r3, [pc, #96]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000122:	4a19      	ldr	r2, [pc, #100]	@ (8000188 <PWM_TIM1_Config+0x80>)
 8000124:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Configura o CH1 em modo PWM1
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M_Msk); // Limpar bits OC1M
 8000126:	4b17      	ldr	r3, [pc, #92]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000128:	699a      	ldr	r2, [r3, #24]
 800012a:	4b16      	ldr	r3, [pc, #88]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 800012c:	2170      	movs	r1, #112	@ 0x70
 800012e:	438a      	bics	r2, r1
 8000130:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;  	//PWM no CH1
 8000132:	4b14      	ldr	r3, [pc, #80]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000134:	699a      	ldr	r2, [r3, #24]
 8000136:	4b13      	ldr	r3, [pc, #76]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000138:	2168      	movs	r1, #104	@ 0x68
 800013a:	430a      	orrs	r2, r1
 800013c:	619a      	str	r2, [r3, #24]

	//Ativa saída do canal 1 (CH1) e do canal 1 complementar (CH1N)
	TIM1->CCER |= TIM_CCER_CC1E;   										//Habilita CH1
 800013e:	4b11      	ldr	r3, [pc, #68]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000140:	6a1a      	ldr	r2, [r3, #32]
 8000142:	4b10      	ldr	r3, [pc, #64]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000144:	2101      	movs	r1, #1
 8000146:	430a      	orrs	r2, r1
 8000148:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC1NE;  										//Habilitar CH1N
 800014a:	4b0e      	ldr	r3, [pc, #56]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 800014c:	6a1a      	ldr	r2, [r3, #32]
 800014e:	4b0d      	ldr	r3, [pc, #52]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000150:	2104      	movs	r1, #4
 8000152:	430a      	orrs	r2, r1
 8000154:	621a      	str	r2, [r3, #32]

	//Configura valor de comparação (duty cycle)
	TIM1->CCR1 = 500; 													//Duty cycle 50% para CH1
 8000156:	4b0b      	ldr	r3, [pc, #44]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000158:	22fa      	movs	r2, #250	@ 0xfa
 800015a:	0052      	lsls	r2, r2, #1
 800015c:	635a      	str	r2, [r3, #52]	@ 0x34

	//Ativa o contador e a saída principal
	TIM1->BDTR |= TIM_BDTR_MOE;    										//Ativa as saídas principais
 800015e:	4b09      	ldr	r3, [pc, #36]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000162:	4b08      	ldr	r3, [pc, #32]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000164:	2180      	movs	r1, #128	@ 0x80
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	430a      	orrs	r2, r1
 800016a:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->CR1 |= TIM_CR1_CEN;      										//Ativa o contador
 800016c:	4b05      	ldr	r3, [pc, #20]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	4b04      	ldr	r3, [pc, #16]	@ (8000184 <PWM_TIM1_Config+0x7c>)
 8000172:	2101      	movs	r1, #1
 8000174:	430a      	orrs	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
}
 8000178:	46c0      	nop			@ (mov r8, r8)
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	46c0      	nop			@ (mov r8, r8)
 8000180:	40021000 	.word	0x40021000
 8000184:	40012c00 	.word	0x40012c00
 8000188:	000003e7 	.word	0x000003e7

0800018c <OscInit>:
#include "stm32f030x6.h"
#include "configs.h"

void OscInit(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	//Ativa o HSE (Cristal Externo de 8 MHz)
	RCC->CR |= RCC_CR_HSEON;
 8000190:	4b0f      	ldr	r3, [pc, #60]	@ (80001d0 <OscInit+0x44>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b0e      	ldr	r3, [pc, #56]	@ (80001d0 <OscInit+0x44>)
 8000196:	2180      	movs	r1, #128	@ 0x80
 8000198:	0249      	lsls	r1, r1, #9
 800019a:	430a      	orrs	r2, r1
 800019c:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); 								//Espera até o HSE ficar pronto
 800019e:	46c0      	nop			@ (mov r8, r8)
 80001a0:	4b0b      	ldr	r3, [pc, #44]	@ (80001d0 <OscInit+0x44>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	2380      	movs	r3, #128	@ 0x80
 80001a6:	029b      	lsls	r3, r3, #10
 80001a8:	4013      	ands	r3, r2
 80001aa:	d0f9      	beq.n	80001a0 <OscInit+0x14>

	//Seleciona o HSE como o clock do sistema
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 80001ac:	4b08      	ldr	r3, [pc, #32]	@ (80001d0 <OscInit+0x44>)
 80001ae:	685a      	ldr	r2, [r3, #4]
 80001b0:	4b07      	ldr	r3, [pc, #28]	@ (80001d0 <OscInit+0x44>)
 80001b2:	2101      	movs	r1, #1
 80001b4:	430a      	orrs	r2, r1
 80001b6:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE); 			//Espera até o HSE ser selecionado
 80001b8:	46c0      	nop			@ (mov r8, r8)
 80001ba:	4b05      	ldr	r3, [pc, #20]	@ (80001d0 <OscInit+0x44>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	220c      	movs	r2, #12
 80001c0:	4013      	ands	r3, r2
 80001c2:	2b04      	cmp	r3, #4
 80001c4:	d1f9      	bne.n	80001ba <OscInit+0x2e>
}
 80001c6:	46c0      	nop			@ (mov r8, r8)
 80001c8:	46c0      	nop			@ (mov r8, r8)
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	46c0      	nop			@ (mov r8, r8)
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO>:

void GPIO(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	//Ativa o clock para o GPIOA
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80001d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000254 <GPIO+0x80>)
 80001da:	695a      	ldr	r2, [r3, #20]
 80001dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000254 <GPIO+0x80>)
 80001de:	2180      	movs	r1, #128	@ 0x80
 80001e0:	0289      	lsls	r1, r1, #10
 80001e2:	430a      	orrs	r2, r1
 80001e4:	615a      	str	r2, [r3, #20]

	//Configura o PA7 como saida alternativa para TIM1_CH1N (AF2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER7);
 80001e6:	2390      	movs	r3, #144	@ 0x90
 80001e8:	05db      	lsls	r3, r3, #23
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	2390      	movs	r3, #144	@ 0x90
 80001ee:	05db      	lsls	r3, r3, #23
 80001f0:	4919      	ldr	r1, [pc, #100]	@ (8000258 <GPIO+0x84>)
 80001f2:	400a      	ands	r2, r1
 80001f4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER7_1); 								//PA8 em modo função alternativa
 80001f6:	2390      	movs	r3, #144	@ 0x90
 80001f8:	05db      	lsls	r3, r3, #23
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	2390      	movs	r3, #144	@ 0x90
 80001fe:	05db      	lsls	r3, r3, #23
 8000200:	2180      	movs	r1, #128	@ 0x80
 8000202:	0209      	lsls	r1, r1, #8
 8000204:	430a      	orrs	r2, r1
 8000206:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (0x02 << GPIO_AFRL_AFRL7_Pos);						//AF2 para PA7
 8000208:	2390      	movs	r3, #144	@ 0x90
 800020a:	05db      	lsls	r3, r3, #23
 800020c:	6a1a      	ldr	r2, [r3, #32]
 800020e:	2390      	movs	r3, #144	@ 0x90
 8000210:	05db      	lsls	r3, r3, #23
 8000212:	2180      	movs	r1, #128	@ 0x80
 8000214:	0589      	lsls	r1, r1, #22
 8000216:	430a      	orrs	r2, r1
 8000218:	621a      	str	r2, [r3, #32]

	//Configura o PA8 como saida alternativa para TIM1_CH1 (AF2)
	GPIOA->MODER &= ~(GPIO_MODER_MODER8);
 800021a:	2390      	movs	r3, #144	@ 0x90
 800021c:	05db      	lsls	r3, r3, #23
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	2390      	movs	r3, #144	@ 0x90
 8000222:	05db      	lsls	r3, r3, #23
 8000224:	490d      	ldr	r1, [pc, #52]	@ (800025c <GPIO+0x88>)
 8000226:	400a      	ands	r2, r1
 8000228:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER8_1); 								//PA8 em modo função alternativa
 800022a:	2390      	movs	r3, #144	@ 0x90
 800022c:	05db      	lsls	r3, r3, #23
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	2390      	movs	r3, #144	@ 0x90
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2180      	movs	r1, #128	@ 0x80
 8000236:	0289      	lsls	r1, r1, #10
 8000238:	430a      	orrs	r2, r1
 800023a:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= (0x02 << GPIO_AFRH_AFRH0_Pos); 					//AF2 para PA8
 800023c:	2390      	movs	r3, #144	@ 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000242:	2390      	movs	r3, #144	@ 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2102      	movs	r1, #2
 8000248:	430a      	orrs	r2, r1
 800024a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	40021000 	.word	0x40021000
 8000258:	ffff3fff 	.word	0xffff3fff
 800025c:	fffcffff 	.word	0xfffcffff

08000260 <main>:

#include "delay.h"
#include "configs.h"
#include "PWM.h"

int main(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	OscInit();
 8000264:	f7ff ff92 	bl	800018c <OscInit>
	GPIO();
 8000268:	f7ff ffb4 	bl	80001d4 <GPIO>
	PWM_TIM1_Config();
 800026c:	f7ff ff4c 	bl	8000108 <PWM_TIM1_Config>

	while(1){
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	e7fd      	b.n	8000270 <main+0x10>

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	e000      	b.n	800027c <Reset_Handler+0x8>
 800027a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	@ (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffdb 	bl	8000260 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	2600      	movs	r6, #0
 80002cc:	4c0c      	ldr	r4, [pc, #48]	@ (8000300 <__libc_init_array+0x38>)
 80002ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000304 <__libc_init_array+0x3c>)
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	2600      	movs	r6, #0
 80002da:	f000 f819 	bl	8000310 <_init>
 80002de:	4c0a      	ldr	r4, [pc, #40]	@ (8000308 <__libc_init_array+0x40>)
 80002e0:	4d0a      	ldr	r5, [pc, #40]	@ (800030c <__libc_init_array+0x44>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	00b3      	lsls	r3, r6, #2
 80002ee:	58eb      	ldr	r3, [r5, r3]
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	00b3      	lsls	r3, r6, #2
 80002f8:	58eb      	ldr	r3, [r5, r3]
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	0800032c 	.word	0x0800032c
 800030c:	08000328 	.word	0x08000328

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	46c0      	nop			@ (mov r8, r8)
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	46c0      	nop			@ (mov r8, r8)
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
