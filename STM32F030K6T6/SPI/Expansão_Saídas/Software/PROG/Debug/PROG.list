
PROG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000c74  08000c74  00001c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ce4  08000ce4  00001cec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ce4  08000ce4  00001cec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ce4  08000cec  00001cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce4  08000ce4  00001ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ce8  08000ce8  00001ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000cec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000cec  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000149a  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070a  00000000  00000000  000031ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000038b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d2  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008605  00000000  00000000  00003ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bc9  00000000  00000000  0000c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002bc30  00000000  00000000  0000dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000398c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002fc  00000000  00000000  00039904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000c5c 	.word	0x08000c5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000c5c 	.word	0x08000c5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b7f      	cmp	r3, #127	@ 0x7f
 8000406:	d809      	bhi.n	800041c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	001a      	movs	r2, r3
 800040e:	231f      	movs	r3, #31
 8000410:	401a      	ands	r2, r3
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <__NVIC_EnableIRQ+0x30>)
 8000414:	2101      	movs	r1, #1
 8000416:	4091      	lsls	r1, r2
 8000418:	000a      	movs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
  }
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000436:	1dfb      	adds	r3, r7, #7
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b7f      	cmp	r3, #127	@ 0x7f
 800043c:	d828      	bhi.n	8000490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800043e:	4a2f      	ldr	r2, [pc, #188]	@ (80004fc <__NVIC_SetPriority+0xd4>)
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	b25b      	sxtb	r3, r3
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	33c0      	adds	r3, #192	@ 0xc0
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	589b      	ldr	r3, [r3, r2]
 800044e:	1dfa      	adds	r2, r7, #7
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	0011      	movs	r1, r2
 8000454:	2203      	movs	r2, #3
 8000456:	400a      	ands	r2, r1
 8000458:	00d2      	lsls	r2, r2, #3
 800045a:	21ff      	movs	r1, #255	@ 0xff
 800045c:	4091      	lsls	r1, r2
 800045e:	000a      	movs	r2, r1
 8000460:	43d2      	mvns	r2, r2
 8000462:	401a      	ands	r2, r3
 8000464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	019b      	lsls	r3, r3, #6
 800046a:	22ff      	movs	r2, #255	@ 0xff
 800046c:	401a      	ands	r2, r3
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	0018      	movs	r0, r3
 8000474:	2303      	movs	r3, #3
 8000476:	4003      	ands	r3, r0
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047c:	481f      	ldr	r0, [pc, #124]	@ (80004fc <__NVIC_SetPriority+0xd4>)
 800047e:	1dfb      	adds	r3, r7, #7
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b25b      	sxtb	r3, r3
 8000484:	089b      	lsrs	r3, r3, #2
 8000486:	430a      	orrs	r2, r1
 8000488:	33c0      	adds	r3, #192	@ 0xc0
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800048e:	e031      	b.n	80004f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000490:	4a1b      	ldr	r2, [pc, #108]	@ (8000500 <__NVIC_SetPriority+0xd8>)
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	0019      	movs	r1, r3
 8000498:	230f      	movs	r3, #15
 800049a:	400b      	ands	r3, r1
 800049c:	3b08      	subs	r3, #8
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	3306      	adds	r3, #6
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	18d3      	adds	r3, r2, r3
 80004a6:	3304      	adds	r3, #4
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1dfa      	adds	r2, r7, #7
 80004ac:	7812      	ldrb	r2, [r2, #0]
 80004ae:	0011      	movs	r1, r2
 80004b0:	2203      	movs	r2, #3
 80004b2:	400a      	ands	r2, r1
 80004b4:	00d2      	lsls	r2, r2, #3
 80004b6:	21ff      	movs	r1, #255	@ 0xff
 80004b8:	4091      	lsls	r1, r2
 80004ba:	000a      	movs	r2, r1
 80004bc:	43d2      	mvns	r2, r2
 80004be:	401a      	ands	r2, r3
 80004c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	019b      	lsls	r3, r3, #6
 80004c6:	22ff      	movs	r2, #255	@ 0xff
 80004c8:	401a      	ands	r2, r3
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	0018      	movs	r0, r3
 80004d0:	2303      	movs	r3, #3
 80004d2:	4003      	ands	r3, r0
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	4809      	ldr	r0, [pc, #36]	@ (8000500 <__NVIC_SetPriority+0xd8>)
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	001c      	movs	r4, r3
 80004e0:	230f      	movs	r3, #15
 80004e2:	4023      	ands	r3, r4
 80004e4:	3b08      	subs	r3, #8
 80004e6:	089b      	lsrs	r3, r3, #2
 80004e8:	430a      	orrs	r2, r1
 80004ea:	3306      	adds	r3, #6
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	18c3      	adds	r3, r0, r3
 80004f0:	3304      	adds	r3, #4
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b003      	add	sp, #12
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	e000e100 	.word	0xe000e100
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <EUSART1_Init>:
#include "stm32f030x6.h"

#include "EUSART.h"
#include "defines.h"

void EUSART1_Init(unsigned long baudrate){
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	//Habilita o clock para GPIOA e USART1
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;    							//Clock para GPIOA
 800050c:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <EUSART1_Init+0x90>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	4b20      	ldr	r3, [pc, #128]	@ (8000594 <EUSART1_Init+0x90>)
 8000512:	2180      	movs	r1, #128	@ 0x80
 8000514:	0289      	lsls	r1, r1, #10
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 							//Clock para USART1
 800051a:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <EUSART1_Init+0x90>)
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <EUSART1_Init+0x90>)
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	01c9      	lsls	r1, r1, #7
 8000524:	430a      	orrs	r2, r1
 8000526:	619a      	str	r2, [r3, #24]

	//Configura PA2 (TX) e PA3 (RX) como Alternate Function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3); 		//Limpa os bits
 8000528:	2390      	movs	r3, #144	@ 0x90
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	2390      	movs	r3, #144	@ 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	21f0      	movs	r1, #240	@ 0xf0
 8000534:	438a      	bics	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1); 	//Modo AF para PA2 e PA3
 8000538:	2390      	movs	r3, #144	@ 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	2390      	movs	r3, #144	@ 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	21a0      	movs	r1, #160	@ 0xa0
 8000544:	430a      	orrs	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] &= ~((0xF << (2 * 4)) | (0xF << (3 * 4)));   		//Limpa AF para PA2 e PA3
 8000548:	2390      	movs	r3, #144	@ 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	6a1a      	ldr	r2, [r3, #32]
 800054e:	2390      	movs	r3, #144	@ 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	4911      	ldr	r1, [pc, #68]	@ (8000598 <EUSART1_Init+0x94>)
 8000554:	400a      	ands	r2, r1
 8000556:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= ((1 << (2 * 4)) | (1 << (3 * 4)));        		//AF1 para USART1_TX e USART1_RX
 8000558:	2390      	movs	r3, #144	@ 0x90
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	6a1a      	ldr	r2, [r3, #32]
 800055e:	2390      	movs	r3, #144	@ 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2188      	movs	r1, #136	@ 0x88
 8000564:	0149      	lsls	r1, r1, #5
 8000566:	430a      	orrs	r2, r1
 8000568:	621a      	str	r2, [r3, #32]

	//Configura baud rate (assume clock de 8 MHz e 9600 bps)
	USART1->BRR = SYSTEM_CLOCK / baudrate;
 800056a:	4c0c      	ldr	r4, [pc, #48]	@ (800059c <EUSART1_Init+0x98>)
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <EUSART1_Init+0x9c>)
 8000570:	f7ff fdca 	bl	8000108 <__udivsi3>
 8000574:	0003      	movs	r3, r0
 8000576:	60e3      	str	r3, [r4, #12]

	//Habilitar interrupção no NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 8000578:	201b      	movs	r0, #27
 800057a:	f7ff ff3b 	bl	80003f4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 0);  								//Prioridade alta
 800057e:	2100      	movs	r1, #0
 8000580:	201b      	movs	r0, #27
 8000582:	f7ff ff51 	bl	8000428 <__NVIC_SetPriority>

	//Habilita USART1 e configurar para transmissao e recepção
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 8000586:	4b05      	ldr	r3, [pc, #20]	@ (800059c <EUSART1_Init+0x98>)
 8000588:	222d      	movs	r2, #45	@ 0x2d
 800058a:	601a      	str	r2, [r3, #0]
}
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b003      	add	sp, #12
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	ffff00ff 	.word	0xffff00ff
 800059c:	40013800 	.word	0x40013800
 80005a0:	007a1200 	.word	0x007a1200

080005a4 <EUSART1_Write>:

void EUSART1_Write(const char data){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	701a      	strb	r2, [r3, #0]
	//Espera ate o registrador de dados estar pronto para transmissão
	while (!(USART1->ISR & USART_ISR_TXE));
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <EUSART1_Write+0x2c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	4013      	ands	r3, r2
 80005ba:	d0fa      	beq.n	80005b2 <EUSART1_Write+0xe>

	//Escreve o caractere no registrador de dados
	USART1->TDR = data;
 80005bc:	4a04      	ldr	r2, [pc, #16]	@ (80005d0 <EUSART1_Write+0x2c>)
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	8513      	strh	r3, [r2, #40]	@ 0x28

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40013800 	.word	0x40013800

080005d4 <EUSART1_Write_Text>:
	EUSART1_Write(data);
	EUSART1_Write('\r');
	EUSART1_Write('\n');
}

void EUSART1_Write_Text(const char text[]){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;text[i]!='\0';i++){
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e009      	b.n	80005f6 <EUSART1_Write_Text+0x22>
        EUSART1_Write(text[i]);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	18d3      	adds	r3, r2, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ffda 	bl	80005a4 <EUSART1_Write>
    for(i=0;text[i]!='\0';i++){
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	18d3      	adds	r3, r2, r3
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1ef      	bne.n	80005e2 <EUSART1_Write_Text+0xe>
    }
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b004      	add	sp, #16
 800060a:	bd80      	pop	{r7, pc}

0800060c <EUSART1_Write_Text_ln>:

void EUSART1_Write_Text_ln(const char text[]){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	EUSART1_Write_Text(text);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ffdc 	bl	80005d4 <EUSART1_Write_Text>
	EUSART1_Write('\r');
 800061c:	200d      	movs	r0, #13
 800061e:	f7ff ffc1 	bl	80005a4 <EUSART1_Write>
	EUSART1_Write('\n');
 8000622:	200a      	movs	r0, #10
 8000624:	f7ff ffbe 	bl	80005a4 <EUSART1_Write>
}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}

08000630 <SPI1_Init>:
#include "stm32f030x6.h"

#include "SPI.h"

void SPI1_Init(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	// 1. Habilita clock para GPIOA e SPI1
	RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;
 8000634:	4b35      	ldr	r3, [pc, #212]	@ (800070c <SPI1_Init+0xdc>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	4b34      	ldr	r3, [pc, #208]	@ (800070c <SPI1_Init+0xdc>)
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	0289      	lsls	r1, r1, #10
 800063e:	430a      	orrs	r2, r1
 8000640:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000642:	4b32      	ldr	r3, [pc, #200]	@ (800070c <SPI1_Init+0xdc>)
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <SPI1_Init+0xdc>)
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	0149      	lsls	r1, r1, #5
 800064c:	430a      	orrs	r2, r1
 800064e:	619a      	str	r2, [r3, #24]

	// 2. Configura PA5 (SCK) e PA7 (MOSI) como Alternate Function
	GPIOA->MODER &= ~(GPIO_MODER_MODER5_Msk | GPIO_MODER_MODER7_Msk);
 8000650:	2390      	movs	r3, #144	@ 0x90
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	2390      	movs	r3, #144	@ 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	492d      	ldr	r1, [pc, #180]	@ (8000710 <SPI1_Init+0xe0>)
 800065c:	400a      	ands	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |=  (GPIO_MODER_MODER5_1 | GPIO_MODER_MODER7_1); 			// AF mode
 8000660:	2390      	movs	r3, #144	@ 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	2390      	movs	r3, #144	@ 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2188      	movs	r1, #136	@ 0x88
 800066c:	0209      	lsls	r1, r1, #8
 800066e:	430a      	orrs	r2, r1
 8000670:	601a      	str	r2, [r3, #0]

	// AF0 para SPI1 (AFRL5 e AFRL7 como 0b0000)
	GPIOA->AFR[0] &= ~((0xF << (5 * 4)) | (0xF << (7 * 4)));
 8000672:	2390      	movs	r3, #144	@ 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	6a1a      	ldr	r2, [r3, #32]
 8000678:	2390      	movs	r3, #144	@ 0x90
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	4925      	ldr	r1, [pc, #148]	@ (8000714 <SPI1_Init+0xe4>)
 800067e:	400a      	ands	r2, r1
 8000680:	621a      	str	r2, [r3, #32]

	// 3. Configura SPI1 como mestre, software NSS, prescaler baixo
	SPI1->CR1 = 0;
 8000682:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <SPI1_Init+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;      										// Modo mestre
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <SPI1_Init+0xe8>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SPI1_Init+0xe8>)
 800068e:	2104      	movs	r1, #4
 8000690:	430a      	orrs	r2, r1
 8000692:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SSM;       										// Software slave management
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <SPI1_Init+0xe8>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SPI1_Init+0xe8>)
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	0089      	lsls	r1, r1, #2
 800069e:	430a      	orrs	r2, r1
 80006a0:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SSI;       										// NSS em high
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SPI1_Init+0xe8>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <SPI1_Init+0xe8>)
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1 | SPI_CR1_BR_2;
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <SPI1_Init+0xe8>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <SPI1_Init+0xe8>)
 80006b6:	2138      	movs	r1, #56	@ 0x38
 80006b8:	430a      	orrs	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~(SPI_CR1_CPOL | SPI_CR1_CPHA); 							// CPOL=0, CPHA=0
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <SPI1_Init+0xe8>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <SPI1_Init+0xe8>)
 80006c2:	2103      	movs	r1, #3
 80006c4:	438a      	bics	r2, r1
 80006c6:	601a      	str	r2, [r3, #0]
	//SPI1->CR1 &= ~SPI_CR1_LSBFIRST;

	SPI1->CR1 &= ~SPI_CR1_SPE;       										// Desabilita SPI antes de configurar
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <SPI1_Init+0xe8>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <SPI1_Init+0xe8>)
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	438a      	bics	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
	SPI1->CR2 &= ~SPI_CR2_DS;       										// Zera os bits DS
 80006d4:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <SPI1_Init+0xe8>)
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <SPI1_Init+0xe8>)
 80006da:	4910      	ldr	r1, [pc, #64]	@ (800071c <SPI1_Init+0xec>)
 80006dc:	400a      	ands	r2, r1
 80006de:	605a      	str	r2, [r3, #4]
	SPI1->CR2 |= (7 << SPI_CR2_DS_Pos); 									// DS = 0b0111 = 8-bit frame
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <SPI1_Init+0xe8>)
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <SPI1_Init+0xe8>)
 80006e6:	21e0      	movs	r1, #224	@ 0xe0
 80006e8:	00c9      	lsls	r1, r1, #3
 80006ea:	430a      	orrs	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]
	SPI1->CR2 &= ~SPI_CR2_FRXTH;     										// FIFO Threshold = 8 bits (opcional)
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <SPI1_Init+0xe8>)
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <SPI1_Init+0xe8>)
 80006f4:	490a      	ldr	r1, [pc, #40]	@ (8000720 <SPI1_Init+0xf0>)
 80006f6:	400a      	ands	r2, r1
 80006f8:	605a      	str	r2, [r3, #4]

	SPI1->CR1 |= SPI_CR1_SPE;       										// Habilita SPI
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <SPI1_Init+0xe8>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <SPI1_Init+0xe8>)
 8000700:	2140      	movs	r1, #64	@ 0x40
 8000702:	430a      	orrs	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	ffff33ff 	.word	0xffff33ff
 8000714:	0f0fffff 	.word	0x0f0fffff
 8000718:	40013000 	.word	0x40013000
 800071c:	fffff0ff 	.word	0xfffff0ff
 8000720:	ffffefff 	.word	0xffffefff

08000724 <SPI1_Write>:

void SPI1_Write(uint8_t data){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	0002      	movs	r2, r0
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	701a      	strb	r2, [r3, #0]
	while (!(SPI1->SR & SPI_SR_TXE));
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <SPI1_Write+0x44>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	2202      	movs	r2, #2
 8000738:	4013      	ands	r3, r2
 800073a:	d0fa      	beq.n	8000732 <SPI1_Write+0xe>
	*((__IO uint8_t*)&SPI1->DR) = data;  									//acesso forçado de 8 bits, sem isso o compilador força um sinal de 16 bits
 800073c:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <SPI1_Write+0x48>)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	7013      	strb	r3, [r2, #0]
	while (!(SPI1->SR & SPI_SR_TXE));
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <SPI1_Write+0x44>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	2202      	movs	r2, #2
 800074c:	4013      	ands	r3, r2
 800074e:	d0fa      	beq.n	8000746 <SPI1_Write+0x22>
	while (SPI1->SR & SPI_SR_BSY);
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <SPI1_Write+0x44>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	4013      	ands	r3, r2
 800075a:	d1fa      	bne.n	8000752 <SPI1_Write+0x2e>
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40013000 	.word	0x40013000
 800076c:	4001300c 	.word	0x4001300c

08000770 <__NVIC_EnableIRQ>:
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b7f      	cmp	r3, #127	@ 0x7f
 8000782:	d809      	bhi.n	8000798 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	001a      	movs	r2, r3
 800078a:	231f      	movs	r3, #31
 800078c:	401a      	ands	r2, r3
 800078e:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <__NVIC_EnableIRQ+0x30>)
 8000790:	2101      	movs	r1, #1
 8000792:	4091      	lsls	r1, r2
 8000794:	000a      	movs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <__NVIC_SetPriority>:
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007b8:	d828      	bhi.n	800080c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000878 <__NVIC_SetPriority+0xd4>)
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	33c0      	adds	r3, #192	@ 0xc0
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	589b      	ldr	r3, [r3, r2]
 80007ca:	1dfa      	adds	r2, r7, #7
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	0011      	movs	r1, r2
 80007d0:	2203      	movs	r2, #3
 80007d2:	400a      	ands	r2, r1
 80007d4:	00d2      	lsls	r2, r2, #3
 80007d6:	21ff      	movs	r1, #255	@ 0xff
 80007d8:	4091      	lsls	r1, r2
 80007da:	000a      	movs	r2, r1
 80007dc:	43d2      	mvns	r2, r2
 80007de:	401a      	ands	r2, r3
 80007e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	22ff      	movs	r2, #255	@ 0xff
 80007e8:	401a      	ands	r2, r3
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	2303      	movs	r3, #3
 80007f2:	4003      	ands	r3, r0
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f8:	481f      	ldr	r0, [pc, #124]	@ (8000878 <__NVIC_SetPriority+0xd4>)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	089b      	lsrs	r3, r3, #2
 8000802:	430a      	orrs	r2, r1
 8000804:	33c0      	adds	r3, #192	@ 0xc0
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	501a      	str	r2, [r3, r0]
}
 800080a:	e031      	b.n	8000870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <__NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0019      	movs	r1, r3
 8000814:	230f      	movs	r3, #15
 8000816:	400b      	ands	r3, r1
 8000818:	3b08      	subs	r3, #8
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	3306      	adds	r3, #6
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	3304      	adds	r3, #4
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	1dfa      	adds	r2, r7, #7
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	0011      	movs	r1, r2
 800082c:	2203      	movs	r2, #3
 800082e:	400a      	ands	r2, r1
 8000830:	00d2      	lsls	r2, r2, #3
 8000832:	21ff      	movs	r1, #255	@ 0xff
 8000834:	4091      	lsls	r1, r2
 8000836:	000a      	movs	r2, r1
 8000838:	43d2      	mvns	r2, r2
 800083a:	401a      	ands	r2, r3
 800083c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	019b      	lsls	r3, r3, #6
 8000842:	22ff      	movs	r2, #255	@ 0xff
 8000844:	401a      	ands	r2, r3
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	0018      	movs	r0, r3
 800084c:	2303      	movs	r3, #3
 800084e:	4003      	ands	r3, r0
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000854:	4809      	ldr	r0, [pc, #36]	@ (800087c <__NVIC_SetPriority+0xd8>)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	001c      	movs	r4, r3
 800085c:	230f      	movs	r3, #15
 800085e:	4023      	ands	r3, r4
 8000860:	3b08      	subs	r3, #8
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	430a      	orrs	r2, r1
 8000866:	3306      	adds	r3, #6
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	18c3      	adds	r3, r0, r3
 800086c:	3304      	adds	r3, #4
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	e000e100 	.word	0xe000e100
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <OscInit>:
#include "stm32f030x6.h"

#include "configs.h"
#include "defines.h"

void OscInit(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	//Ativa o HSE (Cristal Externo de 8 MHz)
	RCC->CR |= RCC_CR_HSEON;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <OscInit+0x44>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <OscInit+0x44>)
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	0249      	lsls	r1, r1, #9
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); 						//Espera até o HSE ficar pronto
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <OscInit+0x44>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	029b      	lsls	r3, r3, #10
 800089c:	4013      	ands	r3, r2
 800089e:	d0f9      	beq.n	8000894 <OscInit+0x14>

	//Seleciona o HSE como o clock do sistema
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <OscInit+0x44>)
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <OscInit+0x44>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE); 	//Espera até o HSE ser selecionado
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <OscInit+0x44>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	220c      	movs	r2, #12
 80008b4:	4013      	ands	r3, r2
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d1f9      	bne.n	80008ae <OscInit+0x2e>
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	40021000 	.word	0x40021000

080008c8 <GPIO_Init>:

void GPIO_Init(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//Habilita o clock para o GPIOB (Bit 18 do RCC_AHBENR)
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80008cc:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <GPIO_Init+0xd0>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	4b31      	ldr	r3, [pc, #196]	@ (8000998 <GPIO_Init+0xd0>)
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	02c9      	lsls	r1, r1, #11
 80008d6:	430a      	orrs	r2, r1
 80008d8:	615a      	str	r2, [r3, #20]

	//===================================PB0========================================
	//Configura o pino PB0 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER0;  						//Limpa bits 0 e 1 para PB0
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <GPIO_Init+0xd4>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <GPIO_Init+0xd4>)
 80008e0:	2103      	movs	r1, #3
 80008e2:	438a      	bics	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_0;   						//Seta bit 0 para modo saída
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <GPIO_Init+0xd4>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <GPIO_Init+0xd4>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_0;
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <GPIO_Init+0xd4>)
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	4b29      	ldr	r3, [pc, #164]	@ (800099c <GPIO_Init+0xd4>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	438a      	bics	r2, r1
 80008fc:	605a      	str	r2, [r3, #4]

	//Define o valor de PB0 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR0_0;
 80008fe:	4b27      	ldr	r3, [pc, #156]	@ (800099c <GPIO_Init+0xd4>)
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <GPIO_Init+0xd4>)
 8000904:	2101      	movs	r1, #1
 8000906:	438a      	bics	r2, r1
 8000908:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR0_1 | GPIO_OSPEEDR_OSPEEDR0_0);
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <GPIO_Init+0xd4>)
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4b23      	ldr	r3, [pc, #140]	@ (800099c <GPIO_Init+0xd4>)
 8000910:	2103      	movs	r1, #3
 8000912:	430a      	orrs	r2, r1
 8000914:	609a      	str	r2, [r3, #8]

	//===================================PB3========================================
	//Configura o pino PB3 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER3;  						//Limpa bits 0 e 1 para PB3
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <GPIO_Init+0xd4>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <GPIO_Init+0xd4>)
 800091c:	21c0      	movs	r1, #192	@ 0xc0
 800091e:	438a      	bics	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_0;   						//Seta bit 0 para modo saída
 8000922:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <GPIO_Init+0xd4>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <GPIO_Init+0xd4>)
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	430a      	orrs	r2, r1
 800092c:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_3;
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <GPIO_Init+0xd4>)
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <GPIO_Init+0xd4>)
 8000934:	2108      	movs	r1, #8
 8000936:	438a      	bics	r2, r1
 8000938:	605a      	str	r2, [r3, #4]

	//Define o valor de PB3 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR3_0;
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <GPIO_Init+0xd4>)
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <GPIO_Init+0xd4>)
 8000940:	2140      	movs	r1, #64	@ 0x40
 8000942:	438a      	bics	r2, r1
 8000944:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR3_1 | GPIO_OSPEEDR_OSPEEDR3_0);
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <GPIO_Init+0xd4>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <GPIO_Init+0xd4>)
 800094c:	21c0      	movs	r1, #192	@ 0xc0
 800094e:	430a      	orrs	r2, r1
 8000950:	609a      	str	r2, [r3, #8]

	//===================================PB4========================================
	//Configura o pino PB4 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER4;  						//Limpa bits 0 e 1 para PB4
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <GPIO_Init+0xd4>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <GPIO_Init+0xd4>)
 8000958:	4911      	ldr	r1, [pc, #68]	@ (80009a0 <GPIO_Init+0xd8>)
 800095a:	400a      	ands	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_0;   						//Seta bit 0 para modo saída
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <GPIO_Init+0xd4>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <GPIO_Init+0xd4>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	0049      	lsls	r1, r1, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_4;
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <GPIO_Init+0xd4>)
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <GPIO_Init+0xd4>)
 8000972:	2110      	movs	r1, #16
 8000974:	438a      	bics	r2, r1
 8000976:	605a      	str	r2, [r3, #4]

	//Define o valor de PB4 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR4_0;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <GPIO_Init+0xd4>)
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <GPIO_Init+0xd4>)
 800097e:	4909      	ldr	r1, [pc, #36]	@ (80009a4 <GPIO_Init+0xdc>)
 8000980:	400a      	ands	r2, r1
 8000982:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR4_1 | GPIO_OSPEEDR_OSPEEDR4_0);
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <GPIO_Init+0xd4>)
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <GPIO_Init+0xd4>)
 800098a:	21c0      	movs	r1, #192	@ 0xc0
 800098c:	0089      	lsls	r1, r1, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	609a      	str	r2, [r3, #8]
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400
 80009a0:	fffffcff 	.word	0xfffffcff
 80009a4:	fffffeff 	.word	0xfffffeff

080009a8 <TIM3_Init>:

void TIM3_Init(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	// Habilita o clock do Timer 3
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <TIM3_Init+0x48>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <TIM3_Init+0x48>)
 80009b2:	2102      	movs	r1, #2
 80009b4:	430a      	orrs	r2, r1
 80009b6:	61da      	str	r2, [r3, #28]

	// Configuração do Timer 3
	TIM3->PSC = 7;  												// Prescaler: 8MHz/8 = 1MHz
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <TIM3_Init+0x4c>)
 80009ba:	2207      	movs	r2, #7
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 999;   												// Auto-reload: overflow a cada 1000 contagens (1kHz = 1ms)
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <TIM3_Init+0x4c>)
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <TIM3_Init+0x50>)
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Configuração do modo de interrupção por estouro
	TIM3->DIER |= TIM_DIER_UIE;  									// Habilita a interrupção de estouro do timer
 80009c4:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <TIM3_Init+0x4c>)
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <TIM3_Init+0x4c>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]

	//Habilita o Timer 3
	TIM3->CR1 |= TIM_CR1_CEN;
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <TIM3_Init+0x4c>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <TIM3_Init+0x4c>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	430a      	orrs	r2, r1
 80009da:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TIM3_IRQn);      								// Habilita a interrupção do TIM3 no NVIC
 80009dc:	2010      	movs	r0, #16
 80009de:	f7ff fec7 	bl	8000770 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1); 								// Define a prioridade (um valor entre 0 e 3, onde 0 é a mais alta)
 80009e2:	2101      	movs	r1, #1
 80009e4:	2010      	movs	r0, #16
 80009e6:	f7ff fedd 	bl	80007a4 <__NVIC_SetPriority>
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40000400 	.word	0x40000400
 80009f8:	000003e7 	.word	0x000003e7

080009fc <Delay_ms>:
#include "stm32f030x6.h"
#include "delay.h"

void Delay_ms(int Vezes){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	//Clock do sistema seja 8MHz
	int clock_freq = 8000000 / 8; 								//Frequência após o prescaler (1:8)
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <Delay_ms+0x60>)
 8000a06:	60bb      	str	r3, [r7, #8]
	int Ticks = (clock_freq / 1000) * Vezes; 					//Calcula ticks para milissegundos
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	22fa      	movs	r2, #250	@ 0xfa
 8000a0c:	0091      	lsls	r1, r2, #2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fc04 	bl	800021c <__divsi3>
 8000a14:	0003      	movs	r3, r0
 8000a16:	001a      	movs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4353      	muls	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]

	if (Ticks > 0xFFFFFF) Ticks = 0xFFFFFF;  					//Limita ao valor máximo de 24 bits
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	045b      	lsls	r3, r3, #17
 8000a24:	429a      	cmp	r2, r3
 8000a26:	db01      	blt.n	8000a2c <Delay_ms+0x30>
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <Delay_ms+0x64>)
 8000a2a:	60fb      	str	r3, [r7, #12]

	SysTick->LOAD = Ticks - 1;               					//Carrega o valor de Ticks
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <Delay_ms+0x68>)
 8000a32:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;                        					//Limpa o valor atual do contador
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <Delay_ms+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk; 					//Habilita o SysTick
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <Delay_ms+0x68>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]

	//Espera o tempo terminar
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <Delay_ms+0x68>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	2380      	movs	r3, #128	@ 0x80
 8000a48:	025b      	lsls	r3, r3, #9
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	d0f9      	beq.n	8000a42 <Delay_ms+0x46>

	SysTick->CTRL = 0; 											//Desabilita o SysTick
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <Delay_ms+0x68>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	000f4240 	.word	0x000f4240
 8000a60:	00ffffff 	.word	0x00ffffff
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <USART1_IRQHandler>:
#include "SPI.h"

uint8_t uart_rd = 0, receive = 0;
uint16_t mili_seconds_counter = 0;

void USART1_IRQHandler(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	if((USART1->ISR & USART_ISR_RXNE)){
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <USART1_IRQHandler+0x28>)
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	2220      	movs	r2, #32
 8000a72:	4013      	ands	r3, r2
 8000a74:	d008      	beq.n	8000a88 <USART1_IRQHandler+0x20>
		uart_rd = USART1->RDR;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <USART1_IRQHandler+0x28>)
 8000a78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <USART1_IRQHandler+0x2c>)
 8000a80:	701a      	strb	r2, [r3, #0]
		receive = 1;
 8000a82:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <USART1_IRQHandler+0x30>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
	}
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40013800 	.word	0x40013800
 8000a94:	2000001c 	.word	0x2000001c
 8000a98:	2000001d 	.word	0x2000001d

08000a9c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF){ 								// Verifica o flag de atualização (overflow)
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <TIM3_IRQHandler+0x4c>)
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d01a      	beq.n	8000ae0 <TIM3_IRQHandler+0x44>
		TIM3->SR &= ~TIM_SR_UIF; 								// Limpa o flag
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <TIM3_IRQHandler+0x4c>)
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <TIM3_IRQHandler+0x4c>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	611a      	str	r2, [r3, #16]

		mili_seconds_counter++;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <TIM3_IRQHandler+0x50>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <TIM3_IRQHandler+0x50>)
 8000ac0:	801a      	strh	r2, [r3, #0]
		if(mili_seconds_counter == 1000){
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <TIM3_IRQHandler+0x50>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	23fa      	movs	r3, #250	@ 0xfa
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d108      	bne.n	8000ae0 <TIM3_IRQHandler+0x44>
			mili_seconds_counter = 0;
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <TIM3_IRQHandler+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	801a      	strh	r2, [r3, #0]
			TOGGLE_LED_ON_BOARD();								//LED ON BOARD Keep Alive
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <TIM3_IRQHandler+0x54>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <TIM3_IRQHandler+0x54>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	404a      	eors	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]
		}
	}
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	2000001e 	.word	0x2000001e
 8000af0:	48000400 	.word	0x48000400

08000af4 <main>:

int main(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	OscInit();													//Configura o microcontrolador para funcionar em 8MHz
 8000af8:	f7ff fec2 	bl	8000880 <OscInit>
	EUSART1_Init(BAUDRATE);										//Configura a UART com BaudRate em 9600
 8000afc:	2396      	movs	r3, #150	@ 0x96
 8000afe:	019b      	lsls	r3, r3, #6
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fcff 	bl	8000504 <EUSART1_Init>
	SPI1_Init();
 8000b06:	f7ff fd93 	bl	8000630 <SPI1_Init>
	GPIO_Init();
 8000b0a:	f7ff fedd 	bl	80008c8 <GPIO_Init>
	TIM3_Init();
 8000b0e:	f7ff ff4b 	bl	80009a8 <TIM3_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b12:	b662      	cpsie	i
}
 8000b14:	46c0      	nop			@ (mov r8, r8)

	// Habilita interrupções globais
	__enable_irq();

	LOW_MEMORIA();
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <main+0xb4>)
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	0312      	lsls	r2, r2, #12
 8000b1c:	619a      	str	r2, [r3, #24]
	LOW_MOSTRA();
 8000b1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <main+0xb4>)
 8000b20:	2210      	movs	r2, #16
 8000b22:	619a      	str	r2, [r3, #24]

	while(1){
		if(uart_rd != 0){
 8000b24:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <main+0xb8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0fb      	beq.n	8000b24 <main+0x30>
			EUSART1_Write_Text_ln("Defina o caractere que deve ser enviado para o 74HC595:");
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <main+0xbc>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fd6c 	bl	800060c <EUSART1_Write_Text_ln>
			do{
				if(receive == 1){
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <main+0xc0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d123      	bne.n	8000b84 <main+0x90>
					SPI1_Write(uart_rd);
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <main+0xb8>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fdef 	bl	8000724 <SPI1_Write>
					LOW_MOSTRA();
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0xb4>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	619a      	str	r2, [r3, #24]
					HIGH_MEMORIA();
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <main+0xb4>)
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <main+0xb4>)
 8000b52:	2108      	movs	r1, #8
 8000b54:	430a      	orrs	r2, r1
 8000b56:	619a      	str	r2, [r3, #24]
					Delay_ms(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ff4f 	bl	80009fc <Delay_ms>
					HIGH_MOSTRA();
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <main+0xb4>)
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <main+0xb4>)
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	0349      	lsls	r1, r1, #13
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	619a      	str	r2, [r3, #24]
					LOW_MEMORIA();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <main+0xb4>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	0312      	lsls	r2, r2, #12
 8000b72:	619a      	str	r2, [r3, #24]
					receive = 0;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <main+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
					EUSART1_Write_Text_ln("Enviado!");
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <main+0xc4>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fd45 	bl	800060c <EUSART1_Write_Text_ln>
 8000b82:	e008      	b.n	8000b96 <main+0xa2>
				}
				else{
					EUSART1_Write_Text_ln("Aguardando caractere ou tecle # para sair!");
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <main+0xc8>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fd40 	bl	800060c <EUSART1_Write_Text_ln>
					Delay_ms(2000);
 8000b8c:	23fa      	movs	r3, #250	@ 0xfa
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff33 	bl	80009fc <Delay_ms>
				}
			}while(uart_rd != '#');
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <main+0xb8>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b23      	cmp	r3, #35	@ 0x23
 8000b9c:	d1ca      	bne.n	8000b34 <main+0x40>
			uart_rd = 0;
 8000b9e:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <main+0xb8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
		if(uart_rd != 0){
 8000ba4:	e7be      	b.n	8000b24 <main+0x30>
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	08000c74 	.word	0x08000c74
 8000bb4:	2000001d 	.word	0x2000001d
 8000bb8:	08000cac 	.word	0x08000cac
 8000bbc:	08000cb8 	.word	0x08000cb8

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc4:	e000      	b.n	8000bc8 <Reset_Handler+0x8>
 8000bc6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bee:	f000 f811 	bl	8000c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff ff7f 	bl	8000af4 <main>

08000bf6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c04:	08000cec 	.word	0x08000cec
  ldr r2, =_sbss
 8000c08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c0c:	20000020 	.word	0x20000020

08000c10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <__libc_init_array>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	2600      	movs	r6, #0
 8000c18:	4c0c      	ldr	r4, [pc, #48]	@ (8000c4c <__libc_init_array+0x38>)
 8000c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c50 <__libc_init_array+0x3c>)
 8000c1c:	1b64      	subs	r4, r4, r5
 8000c1e:	10a4      	asrs	r4, r4, #2
 8000c20:	42a6      	cmp	r6, r4
 8000c22:	d109      	bne.n	8000c38 <__libc_init_array+0x24>
 8000c24:	2600      	movs	r6, #0
 8000c26:	f000 f819 	bl	8000c5c <_init>
 8000c2a:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <__libc_init_array+0x40>)
 8000c2c:	4d0a      	ldr	r5, [pc, #40]	@ (8000c58 <__libc_init_array+0x44>)
 8000c2e:	1b64      	subs	r4, r4, r5
 8000c30:	10a4      	asrs	r4, r4, #2
 8000c32:	42a6      	cmp	r6, r4
 8000c34:	d105      	bne.n	8000c42 <__libc_init_array+0x2e>
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
 8000c38:	00b3      	lsls	r3, r6, #2
 8000c3a:	58eb      	ldr	r3, [r5, r3]
 8000c3c:	4798      	blx	r3
 8000c3e:	3601      	adds	r6, #1
 8000c40:	e7ee      	b.n	8000c20 <__libc_init_array+0xc>
 8000c42:	00b3      	lsls	r3, r6, #2
 8000c44:	58eb      	ldr	r3, [r5, r3]
 8000c46:	4798      	blx	r3
 8000c48:	3601      	adds	r6, #1
 8000c4a:	e7f2      	b.n	8000c32 <__libc_init_array+0x1e>
 8000c4c:	08000ce4 	.word	0x08000ce4
 8000c50:	08000ce4 	.word	0x08000ce4
 8000c54:	08000ce8 	.word	0x08000ce8
 8000c58:	08000ce4 	.word	0x08000ce4

08000c5c <_init>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr

08000c68 <_fini>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr
