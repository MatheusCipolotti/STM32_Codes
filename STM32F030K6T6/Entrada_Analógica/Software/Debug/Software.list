
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000590  08000590  00001598  2**0
                  CONTENTS
  4 .ARM          00000000  08000590  08000590  00001598  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000590  08000590  00001590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000598  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000598  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000662  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002ed  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000061  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008461  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000110a  00000000  00000000  0000a46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002b8a0  00000000  00000000  0000b574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00036e14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  00036e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00036f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000578 	.word	0x08000578

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000578 	.word	0x08000578

08000108 <ADC_Init>:
#include "stm32f030x6.h"
#include "ADC.h"

void ADC_Init(void){
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	//Configura o CKMODE para PCLK dividido por 2 (CKMODE = 01)
	ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;      						//Limpa CKMODE
 800010c:	4b27      	ldr	r3, [pc, #156]	@ (80001ac <ADC_Init+0xa4>)
 800010e:	691a      	ldr	r2, [r3, #16]
 8000110:	4b26      	ldr	r3, [pc, #152]	@ (80001ac <ADC_Init+0xa4>)
 8000112:	0092      	lsls	r2, r2, #2
 8000114:	0892      	lsrs	r2, r2, #2
 8000116:	611a      	str	r2, [r3, #16]
	ADC1->CFGR2 |= (1 << ADC_CFGR2_CKMODE_Pos); 				//Define CKMODE = 01 (PCLK/2)
 8000118:	4b24      	ldr	r3, [pc, #144]	@ (80001ac <ADC_Init+0xa4>)
 800011a:	691a      	ldr	r2, [r3, #16]
 800011c:	4b23      	ldr	r3, [pc, #140]	@ (80001ac <ADC_Init+0xa4>)
 800011e:	2180      	movs	r1, #128	@ 0x80
 8000120:	05c9      	lsls	r1, r1, #23
 8000122:	430a      	orrs	r2, r1
 8000124:	611a      	str	r2, [r3, #16]

	//Habilita o clock para GPIOA
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000126:	4b22      	ldr	r3, [pc, #136]	@ (80001b0 <ADC_Init+0xa8>)
 8000128:	695a      	ldr	r2, [r3, #20]
 800012a:	4b21      	ldr	r3, [pc, #132]	@ (80001b0 <ADC_Init+0xa8>)
 800012c:	2180      	movs	r1, #128	@ 0x80
 800012e:	0289      	lsls	r1, r1, #10
 8000130:	430a      	orrs	r2, r1
 8000132:	615a      	str	r2, [r3, #20]

	//Configura  o PA0 como entrada analógica
	GPIOA->MODER |= (3 << GPIO_MODER_MODER0_Pos);
 8000134:	2390      	movs	r3, #144	@ 0x90
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	681a      	ldr	r2, [r3, #0]
 800013a:	2390      	movs	r3, #144	@ 0x90
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	2103      	movs	r1, #3
 8000140:	430a      	orrs	r2, r1
 8000142:	601a      	str	r2, [r3, #0]

	//Habilita o clock para o ADC
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000144:	4b1a      	ldr	r3, [pc, #104]	@ (80001b0 <ADC_Init+0xa8>)
 8000146:	699a      	ldr	r2, [r3, #24]
 8000148:	4b19      	ldr	r3, [pc, #100]	@ (80001b0 <ADC_Init+0xa8>)
 800014a:	2180      	movs	r1, #128	@ 0x80
 800014c:	0089      	lsls	r1, r1, #2
 800014e:	430a      	orrs	r2, r1
 8000150:	619a      	str	r2, [r3, #24]

	//Configura o tempo de amostragem para 28,5 ciclos de clock
	ADC1->SMPR &= ~ADC_SMPR_SMP;   							//Limpa o campo SMP1
 8000152:	4b16      	ldr	r3, [pc, #88]	@ (80001ac <ADC_Init+0xa4>)
 8000154:	695a      	ldr	r2, [r3, #20]
 8000156:	4b15      	ldr	r3, [pc, #84]	@ (80001ac <ADC_Init+0xa4>)
 8000158:	2107      	movs	r1, #7
 800015a:	438a      	bics	r2, r1
 800015c:	615a      	str	r2, [r3, #20]
	ADC1->SMPR |= (3 << ADC_SMPR_SMP_Pos); 					//Define SMP1 = 011 (28,5 ciclos)
 800015e:	4b13      	ldr	r3, [pc, #76]	@ (80001ac <ADC_Init+0xa4>)
 8000160:	695a      	ldr	r2, [r3, #20]
 8000162:	4b12      	ldr	r3, [pc, #72]	@ (80001ac <ADC_Init+0xa4>)
 8000164:	2103      	movs	r1, #3
 8000166:	430a      	orrs	r2, r1
 8000168:	615a      	str	r2, [r3, #20]

	//Verifica se o ADC está desativado antes da calibração
	if (!(ADC1->CR & ADC_CR_ADEN)){
 800016a:	4b10      	ldr	r3, [pc, #64]	@ (80001ac <ADC_Init+0xa4>)
 800016c:	689b      	ldr	r3, [r3, #8]
 800016e:	2201      	movs	r2, #1
 8000170:	4013      	ands	r3, r2
 8000172:	d10b      	bne.n	800018c <ADC_Init+0x84>
		//Inicia a calibração do ADC
		ADC1->CR |= ADC_CR_ADCAL;
 8000174:	4b0d      	ldr	r3, [pc, #52]	@ (80001ac <ADC_Init+0xa4>)
 8000176:	689a      	ldr	r2, [r3, #8]
 8000178:	4b0c      	ldr	r3, [pc, #48]	@ (80001ac <ADC_Init+0xa4>)
 800017a:	2180      	movs	r1, #128	@ 0x80
 800017c:	0609      	lsls	r1, r1, #24
 800017e:	430a      	orrs	r2, r1
 8000180:	609a      	str	r2, [r3, #8]
	    //Aguarda a calibração ser concluída
	    while (ADC1->CR & ADC_CR_ADCAL);
 8000182:	46c0      	nop			@ (mov r8, r8)
 8000184:	4b09      	ldr	r3, [pc, #36]	@ (80001ac <ADC_Init+0xa4>)
 8000186:	689b      	ldr	r3, [r3, #8]
 8000188:	2b00      	cmp	r3, #0
 800018a:	dbfb      	blt.n	8000184 <ADC_Init+0x7c>
	}

	//Habilita o ADC
	ADC1->CR |= ADC_CR_ADEN;
 800018c:	4b07      	ldr	r3, [pc, #28]	@ (80001ac <ADC_Init+0xa4>)
 800018e:	689a      	ldr	r2, [r3, #8]
 8000190:	4b06      	ldr	r3, [pc, #24]	@ (80001ac <ADC_Init+0xa4>)
 8000192:	2101      	movs	r1, #1
 8000194:	430a      	orrs	r2, r1
 8000196:	609a      	str	r2, [r3, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY));
 8000198:	46c0      	nop			@ (mov r8, r8)
 800019a:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <ADC_Init+0xa4>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2201      	movs	r2, #1
 80001a0:	4013      	ands	r3, r2
 80001a2:	d0fa      	beq.n	800019a <ADC_Init+0x92>
}
 80001a4:	46c0      	nop			@ (mov r8, r8)
 80001a6:	46c0      	nop			@ (mov r8, r8)
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40012400 	.word	0x40012400
 80001b0:	40021000 	.word	0x40021000

080001b4 <ADC_Read>:

unsigned int ADC_Read(void){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	//Seleciona o canal 0 (PA0)
	ADC1->CHSELR = ADC_CHSELR_CHSEL0;
 80001b8:	4b0c      	ldr	r3, [pc, #48]	@ (80001ec <ADC_Read+0x38>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	629a      	str	r2, [r3, #40]	@ 0x28

	//Limpa qualquer flag de fim de conversão pendente
	ADC1->ISR |= ADC_ISR_EOC;
 80001be:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <ADC_Read+0x38>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	4b0a      	ldr	r3, [pc, #40]	@ (80001ec <ADC_Read+0x38>)
 80001c4:	2104      	movs	r1, #4
 80001c6:	430a      	orrs	r2, r1
 80001c8:	601a      	str	r2, [r3, #0]

	//Inicia a conversão
	ADC1->CR |= ADC_CR_ADSTART;
 80001ca:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <ADC_Read+0x38>)
 80001cc:	689a      	ldr	r2, [r3, #8]
 80001ce:	4b07      	ldr	r3, [pc, #28]	@ (80001ec <ADC_Read+0x38>)
 80001d0:	2104      	movs	r1, #4
 80001d2:	430a      	orrs	r2, r1
 80001d4:	609a      	str	r2, [r3, #8]

	//Aguarda o término da conversão
	while (!(ADC1->ISR & ADC_ISR_EOC));
 80001d6:	46c0      	nop			@ (mov r8, r8)
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <ADC_Read+0x38>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2204      	movs	r2, #4
 80001de:	4013      	ands	r3, r2
 80001e0:	d0fa      	beq.n	80001d8 <ADC_Read+0x24>

	//Retorna o valor convertido
	return ADC1->DR;
 80001e2:	4b02      	ldr	r3, [pc, #8]	@ (80001ec <ADC_Read+0x38>)
 80001e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80001e6:	0018      	movs	r0, r3
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40012400 	.word	0x40012400

080001f0 <OscInit>:
#include "stm32f030x6.h"
#include "configs.h"

void OscInit(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	//Ativa o HSE (Cristal Externo de 8 MHz)
	RCC->CR |= RCC_CR_HSEON;
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <OscInit+0x44>)
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <OscInit+0x44>)
 80001fa:	2180      	movs	r1, #128	@ 0x80
 80001fc:	0249      	lsls	r1, r1, #9
 80001fe:	430a      	orrs	r2, r1
 8000200:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); 						//Espera até o HSE ficar pronto
 8000202:	46c0      	nop			@ (mov r8, r8)
 8000204:	4b0b      	ldr	r3, [pc, #44]	@ (8000234 <OscInit+0x44>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	2380      	movs	r3, #128	@ 0x80
 800020a:	029b      	lsls	r3, r3, #10
 800020c:	4013      	ands	r3, r2
 800020e:	d0f9      	beq.n	8000204 <OscInit+0x14>

	//Seleciona o HSE como o clock do sistema
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000210:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <OscInit+0x44>)
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <OscInit+0x44>)
 8000216:	2101      	movs	r1, #1
 8000218:	430a      	orrs	r2, r1
 800021a:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE); 	//Espera até o HSE ser selecionado
 800021c:	46c0      	nop			@ (mov r8, r8)
 800021e:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <OscInit+0x44>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	220c      	movs	r2, #12
 8000224:	4013      	ands	r3, r2
 8000226:	2b04      	cmp	r3, #4
 8000228:	d1f9      	bne.n	800021e <OscInit+0x2e>
}
 800022a:	46c0      	nop			@ (mov r8, r8)
 800022c:	46c0      	nop			@ (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)
 8000234:	40021000 	.word	0x40021000

08000238 <GPIO>:

void GPIO(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	//Habilita o clock para o GPIOB
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800023c:	4b41      	ldr	r3, [pc, #260]	@ (8000344 <GPIO+0x10c>)
 800023e:	695a      	ldr	r2, [r3, #20]
 8000240:	4b40      	ldr	r3, [pc, #256]	@ (8000344 <GPIO+0x10c>)
 8000242:	2180      	movs	r1, #128	@ 0x80
 8000244:	02c9      	lsls	r1, r1, #11
 8000246:	430a      	orrs	r2, r1
 8000248:	615a      	str	r2, [r3, #20]

//===================================PB0========================================
	//Configura o pino PB0 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER0;  						//Limpa bits 0 e 1 para PB0
 800024a:	4b3f      	ldr	r3, [pc, #252]	@ (8000348 <GPIO+0x110>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b3e      	ldr	r3, [pc, #248]	@ (8000348 <GPIO+0x110>)
 8000250:	2103      	movs	r1, #3
 8000252:	438a      	bics	r2, r1
 8000254:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_0;   						//Seta bit 0 para modo saída
 8000256:	4b3c      	ldr	r3, [pc, #240]	@ (8000348 <GPIO+0x110>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b3b      	ldr	r3, [pc, #236]	@ (8000348 <GPIO+0x110>)
 800025c:	2101      	movs	r1, #1
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_0;
 8000262:	4b39      	ldr	r3, [pc, #228]	@ (8000348 <GPIO+0x110>)
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	4b38      	ldr	r3, [pc, #224]	@ (8000348 <GPIO+0x110>)
 8000268:	2101      	movs	r1, #1
 800026a:	438a      	bics	r2, r1
 800026c:	605a      	str	r2, [r3, #4]

	//Define o valor de PB0 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR0_0;
 800026e:	4b36      	ldr	r3, [pc, #216]	@ (8000348 <GPIO+0x110>)
 8000270:	689a      	ldr	r2, [r3, #8]
 8000272:	4b35      	ldr	r3, [pc, #212]	@ (8000348 <GPIO+0x110>)
 8000274:	2101      	movs	r1, #1
 8000276:	438a      	bics	r2, r1
 8000278:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR0_1 | GPIO_OSPEEDR_OSPEEDR0_0);
 800027a:	4b33      	ldr	r3, [pc, #204]	@ (8000348 <GPIO+0x110>)
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	4b32      	ldr	r3, [pc, #200]	@ (8000348 <GPIO+0x110>)
 8000280:	2103      	movs	r1, #3
 8000282:	430a      	orrs	r2, r1
 8000284:	609a      	str	r2, [r3, #8]


//===================================PB1========================================
	//Configura o pino PB0 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER1;  						//Limpa bits 0 e 1 para PB0
 8000286:	4b30      	ldr	r3, [pc, #192]	@ (8000348 <GPIO+0x110>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b2f      	ldr	r3, [pc, #188]	@ (8000348 <GPIO+0x110>)
 800028c:	210c      	movs	r1, #12
 800028e:	438a      	bics	r2, r1
 8000290:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER1_0;   						//Seta bit 0 para modo saída
 8000292:	4b2d      	ldr	r3, [pc, #180]	@ (8000348 <GPIO+0x110>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <GPIO+0x110>)
 8000298:	2104      	movs	r1, #4
 800029a:	430a      	orrs	r2, r1
 800029c:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_1;
 800029e:	4b2a      	ldr	r3, [pc, #168]	@ (8000348 <GPIO+0x110>)
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	4b29      	ldr	r3, [pc, #164]	@ (8000348 <GPIO+0x110>)
 80002a4:	2102      	movs	r1, #2
 80002a6:	438a      	bics	r2, r1
 80002a8:	605a      	str	r2, [r3, #4]

	//Define o valor de PB0 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR1_0;
 80002aa:	4b27      	ldr	r3, [pc, #156]	@ (8000348 <GPIO+0x110>)
 80002ac:	689a      	ldr	r2, [r3, #8]
 80002ae:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <GPIO+0x110>)
 80002b0:	2104      	movs	r1, #4
 80002b2:	438a      	bics	r2, r1
 80002b4:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR1_1 | GPIO_OSPEEDR_OSPEEDR1_0);
 80002b6:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <GPIO+0x110>)
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	4b23      	ldr	r3, [pc, #140]	@ (8000348 <GPIO+0x110>)
 80002bc:	210c      	movs	r1, #12
 80002be:	430a      	orrs	r2, r1
 80002c0:	609a      	str	r2, [r3, #8]

//===================================PB3========================================
	//Configura o pino PB0 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER3;  						//Limpa bits 0 e 1 para PB0
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <GPIO+0x110>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b20      	ldr	r3, [pc, #128]	@ (8000348 <GPIO+0x110>)
 80002c8:	21c0      	movs	r1, #192	@ 0xc0
 80002ca:	438a      	bics	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER3_0;   						//Seta bit 0 para modo saída
 80002ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000348 <GPIO+0x110>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <GPIO+0x110>)
 80002d4:	2140      	movs	r1, #64	@ 0x40
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_3;
 80002da:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <GPIO+0x110>)
 80002dc:	685a      	ldr	r2, [r3, #4]
 80002de:	4b1a      	ldr	r3, [pc, #104]	@ (8000348 <GPIO+0x110>)
 80002e0:	2108      	movs	r1, #8
 80002e2:	438a      	bics	r2, r1
 80002e4:	605a      	str	r2, [r3, #4]

	//Define o valor de PB0 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR3_0;
 80002e6:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <GPIO+0x110>)
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <GPIO+0x110>)
 80002ec:	2140      	movs	r1, #64	@ 0x40
 80002ee:	438a      	bics	r2, r1
 80002f0:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR3_1 | GPIO_OSPEEDR_OSPEEDR3_0);
 80002f2:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <GPIO+0x110>)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <GPIO+0x110>)
 80002f8:	21c0      	movs	r1, #192	@ 0xc0
 80002fa:	430a      	orrs	r2, r1
 80002fc:	609a      	str	r2, [r3, #8]

//===================================PB4========================================
	//Configura o pino PB0 como saida (MODER: 01)
	GPIOB->MODER &= ~GPIO_MODER_MODER4;  						//Limpa bits 0 e 1 para PB0
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <GPIO+0x110>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <GPIO+0x110>)
 8000304:	4911      	ldr	r1, [pc, #68]	@ (800034c <GPIO+0x114>)
 8000306:	400a      	ands	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_0;   						//Seta bit 0 para modo saída
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <GPIO+0x110>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <GPIO+0x110>)
 8000310:	2180      	movs	r1, #128	@ 0x80
 8000312:	0049      	lsls	r1, r1, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	601a      	str	r2, [r3, #0]

	//Configura a saida como Push-Pull
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_4;
 8000318:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <GPIO+0x110>)
 800031a:	685a      	ldr	r2, [r3, #4]
 800031c:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <GPIO+0x110>)
 800031e:	2110      	movs	r1, #16
 8000320:	438a      	bics	r2, r1
 8000322:	605a      	str	r2, [r3, #4]

	//Define o valor de PB0 para alta velocidade
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR4_0;
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <GPIO+0x110>)
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <GPIO+0x110>)
 800032a:	4909      	ldr	r1, [pc, #36]	@ (8000350 <GPIO+0x118>)
 800032c:	400a      	ands	r2, r1
 800032e:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR4_1 | GPIO_OSPEEDR_OSPEEDR4_0);
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <GPIO+0x110>)
 8000332:	689a      	ldr	r2, [r3, #8]
 8000334:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <GPIO+0x110>)
 8000336:	21c0      	movs	r1, #192	@ 0xc0
 8000338:	0089      	lsls	r1, r1, #2
 800033a:	430a      	orrs	r2, r1
 800033c:	609a      	str	r2, [r3, #8]

}
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	48000400 	.word	0x48000400
 800034c:	fffffcff 	.word	0xfffffcff
 8000350:	fffffeff 	.word	0xfffffeff

08000354 <main>:
#include "configs.h"
#include "ADC.h"

unsigned int adc_var = 0x0000;

int main(){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	OscInit();
 8000358:	f7ff ff4a 	bl	80001f0 <OscInit>
	GPIO();
 800035c:	f7ff ff6c 	bl	8000238 <GPIO>
	ADC_Init();
 8000360:	f7ff fed2 	bl	8000108 <ADC_Init>

	while(1){
		adc_var = ADC_Read();
 8000364:	f7ff ff26 	bl	80001b4 <ADC_Read>
 8000368:	0002      	movs	r2, r0
 800036a:	4b59      	ldr	r3, [pc, #356]	@ (80004d0 <main+0x17c>)
 800036c:	601a      	str	r2, [r3, #0]

		if(adc_var <= 100){
 800036e:	4b58      	ldr	r3, [pc, #352]	@ (80004d0 <main+0x17c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b64      	cmp	r3, #100	@ 0x64
 8000374:	d818      	bhi.n	80003a8 <main+0x54>
			DESHAB_PB0;
 8000376:	4b57      	ldr	r3, [pc, #348]	@ (80004d4 <main+0x180>)
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	4b56      	ldr	r3, [pc, #344]	@ (80004d4 <main+0x180>)
 800037c:	2101      	movs	r1, #1
 800037e:	438a      	bics	r2, r1
 8000380:	615a      	str	r2, [r3, #20]
			DESHAB_PB1;
 8000382:	4b54      	ldr	r3, [pc, #336]	@ (80004d4 <main+0x180>)
 8000384:	695a      	ldr	r2, [r3, #20]
 8000386:	4b53      	ldr	r3, [pc, #332]	@ (80004d4 <main+0x180>)
 8000388:	2102      	movs	r1, #2
 800038a:	438a      	bics	r2, r1
 800038c:	615a      	str	r2, [r3, #20]
			DESHAB_PB3;
 800038e:	4b51      	ldr	r3, [pc, #324]	@ (80004d4 <main+0x180>)
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	4b50      	ldr	r3, [pc, #320]	@ (80004d4 <main+0x180>)
 8000394:	2108      	movs	r1, #8
 8000396:	438a      	bics	r2, r1
 8000398:	615a      	str	r2, [r3, #20]
			DESHAB_PB4;
 800039a:	4b4e      	ldr	r3, [pc, #312]	@ (80004d4 <main+0x180>)
 800039c:	695a      	ldr	r2, [r3, #20]
 800039e:	4b4d      	ldr	r3, [pc, #308]	@ (80004d4 <main+0x180>)
 80003a0:	2110      	movs	r1, #16
 80003a2:	438a      	bics	r2, r1
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	e7dd      	b.n	8000364 <main+0x10>
		}
		else if(adc_var <= 1000){
 80003a8:	4b49      	ldr	r3, [pc, #292]	@ (80004d0 <main+0x17c>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	23fa      	movs	r3, #250	@ 0xfa
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d818      	bhi.n	80003e6 <main+0x92>
			HAB_PB0;
 80003b4:	4b47      	ldr	r3, [pc, #284]	@ (80004d4 <main+0x180>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	4b46      	ldr	r3, [pc, #280]	@ (80004d4 <main+0x180>)
 80003ba:	2101      	movs	r1, #1
 80003bc:	430a      	orrs	r2, r1
 80003be:	615a      	str	r2, [r3, #20]
			DESHAB_PB1;
 80003c0:	4b44      	ldr	r3, [pc, #272]	@ (80004d4 <main+0x180>)
 80003c2:	695a      	ldr	r2, [r3, #20]
 80003c4:	4b43      	ldr	r3, [pc, #268]	@ (80004d4 <main+0x180>)
 80003c6:	2102      	movs	r1, #2
 80003c8:	438a      	bics	r2, r1
 80003ca:	615a      	str	r2, [r3, #20]
			DESHAB_PB3;
 80003cc:	4b41      	ldr	r3, [pc, #260]	@ (80004d4 <main+0x180>)
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	4b40      	ldr	r3, [pc, #256]	@ (80004d4 <main+0x180>)
 80003d2:	2108      	movs	r1, #8
 80003d4:	438a      	bics	r2, r1
 80003d6:	615a      	str	r2, [r3, #20]
			DESHAB_PB4;
 80003d8:	4b3e      	ldr	r3, [pc, #248]	@ (80004d4 <main+0x180>)
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	4b3d      	ldr	r3, [pc, #244]	@ (80004d4 <main+0x180>)
 80003de:	2110      	movs	r1, #16
 80003e0:	438a      	bics	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	e7be      	b.n	8000364 <main+0x10>
		}
		else if(adc_var <= 2000){
 80003e6:	4b3a      	ldr	r3, [pc, #232]	@ (80004d0 <main+0x17c>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	23fa      	movs	r3, #250	@ 0xfa
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d818      	bhi.n	8000424 <main+0xd0>
			HAB_PB0;
 80003f2:	4b38      	ldr	r3, [pc, #224]	@ (80004d4 <main+0x180>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b37      	ldr	r3, [pc, #220]	@ (80004d4 <main+0x180>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	615a      	str	r2, [r3, #20]
			HAB_PB1;
 80003fe:	4b35      	ldr	r3, [pc, #212]	@ (80004d4 <main+0x180>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b34      	ldr	r3, [pc, #208]	@ (80004d4 <main+0x180>)
 8000404:	2102      	movs	r1, #2
 8000406:	430a      	orrs	r2, r1
 8000408:	615a      	str	r2, [r3, #20]
			DESHAB_PB3;
 800040a:	4b32      	ldr	r3, [pc, #200]	@ (80004d4 <main+0x180>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b31      	ldr	r3, [pc, #196]	@ (80004d4 <main+0x180>)
 8000410:	2108      	movs	r1, #8
 8000412:	438a      	bics	r2, r1
 8000414:	615a      	str	r2, [r3, #20]
			DESHAB_PB4;
 8000416:	4b2f      	ldr	r3, [pc, #188]	@ (80004d4 <main+0x180>)
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	4b2e      	ldr	r3, [pc, #184]	@ (80004d4 <main+0x180>)
 800041c:	2110      	movs	r1, #16
 800041e:	438a      	bics	r2, r1
 8000420:	615a      	str	r2, [r3, #20]
 8000422:	e79f      	b.n	8000364 <main+0x10>
		}
		else if(adc_var <= 3000){
 8000424:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <main+0x17c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a2b      	ldr	r2, [pc, #172]	@ (80004d8 <main+0x184>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d818      	bhi.n	8000460 <main+0x10c>
			HAB_PB0;
 800042e:	4b29      	ldr	r3, [pc, #164]	@ (80004d4 <main+0x180>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <main+0x180>)
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	615a      	str	r2, [r3, #20]
			HAB_PB1;
 800043a:	4b26      	ldr	r3, [pc, #152]	@ (80004d4 <main+0x180>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <main+0x180>)
 8000440:	2102      	movs	r1, #2
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]
			HAB_PB3;
 8000446:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <main+0x180>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <main+0x180>)
 800044c:	2108      	movs	r1, #8
 800044e:	430a      	orrs	r2, r1
 8000450:	615a      	str	r2, [r3, #20]
			DESHAB_PB4;
 8000452:	4b20      	ldr	r3, [pc, #128]	@ (80004d4 <main+0x180>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <main+0x180>)
 8000458:	2110      	movs	r1, #16
 800045a:	438a      	bics	r2, r1
 800045c:	615a      	str	r2, [r3, #20]
 800045e:	e781      	b.n	8000364 <main+0x10>
		}
		else if(adc_var <= 4000){
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <main+0x17c>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	23fa      	movs	r3, #250	@ 0xfa
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	429a      	cmp	r2, r3
 800046a:	d818      	bhi.n	800049e <main+0x14a>
			HAB_PB0;
 800046c:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <main+0x180>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <main+0x180>)
 8000472:	2101      	movs	r1, #1
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
			HAB_PB1;
 8000478:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <main+0x180>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <main+0x180>)
 800047e:	2102      	movs	r1, #2
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
			HAB_PB3;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <main+0x180>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <main+0x180>)
 800048a:	2108      	movs	r1, #8
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
			HAB_PB4;
 8000490:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <main+0x180>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <main+0x180>)
 8000496:	2110      	movs	r1, #16
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	e762      	b.n	8000364 <main+0x10>
		}
		else{
			DESHAB_PB0;
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <main+0x180>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <main+0x180>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	438a      	bics	r2, r1
 80004a8:	615a      	str	r2, [r3, #20]
			DESHAB_PB1;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <main+0x180>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <main+0x180>)
 80004b0:	2102      	movs	r1, #2
 80004b2:	438a      	bics	r2, r1
 80004b4:	615a      	str	r2, [r3, #20]
			DESHAB_PB3;
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <main+0x180>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <main+0x180>)
 80004bc:	2108      	movs	r1, #8
 80004be:	438a      	bics	r2, r1
 80004c0:	615a      	str	r2, [r3, #20]
			DESHAB_PB4;
 80004c2:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <main+0x180>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b03      	ldr	r3, [pc, #12]	@ (80004d4 <main+0x180>)
 80004c8:	2110      	movs	r1, #16
 80004ca:	438a      	bics	r2, r1
 80004cc:	615a      	str	r2, [r3, #20]
		adc_var = ADC_Read();
 80004ce:	e749      	b.n	8000364 <main+0x10>
 80004d0:	2000001c 	.word	0x2000001c
 80004d4:	48000400 	.word	0x48000400
 80004d8:	00000bb8 	.word	0x00000bb8

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	@ (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e0:	e000      	b.n	80004e4 <Reset_Handler+0x8>
 80004e2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	@ (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 f811 	bl	8000530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff ff21 	bl	8000354 <main>

08000512 <LoopForever>:

LoopForever:
  b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000520:	08000598 	.word	0x08000598
  ldr r2, =_sbss
 8000524:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000528:	20000020 	.word	0x20000020

0800052c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <__libc_init_array>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2600      	movs	r6, #0
 8000534:	4c0c      	ldr	r4, [pc, #48]	@ (8000568 <__libc_init_array+0x38>)
 8000536:	4d0d      	ldr	r5, [pc, #52]	@ (800056c <__libc_init_array+0x3c>)
 8000538:	1b64      	subs	r4, r4, r5
 800053a:	10a4      	asrs	r4, r4, #2
 800053c:	42a6      	cmp	r6, r4
 800053e:	d109      	bne.n	8000554 <__libc_init_array+0x24>
 8000540:	2600      	movs	r6, #0
 8000542:	f000 f819 	bl	8000578 <_init>
 8000546:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <__libc_init_array+0x40>)
 8000548:	4d0a      	ldr	r5, [pc, #40]	@ (8000574 <__libc_init_array+0x44>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	42a6      	cmp	r6, r4
 8000550:	d105      	bne.n	800055e <__libc_init_array+0x2e>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	00b3      	lsls	r3, r6, #2
 8000556:	58eb      	ldr	r3, [r5, r3]
 8000558:	4798      	blx	r3
 800055a:	3601      	adds	r6, #1
 800055c:	e7ee      	b.n	800053c <__libc_init_array+0xc>
 800055e:	00b3      	lsls	r3, r6, #2
 8000560:	58eb      	ldr	r3, [r5, r3]
 8000562:	4798      	blx	r3
 8000564:	3601      	adds	r6, #1
 8000566:	e7f2      	b.n	800054e <__libc_init_array+0x1e>
 8000568:	08000590 	.word	0x08000590
 800056c:	08000590 	.word	0x08000590
 8000570:	08000594 	.word	0x08000594
 8000574:	08000590 	.word	0x08000590

08000578 <_init>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr

08000584 <_fini>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr
