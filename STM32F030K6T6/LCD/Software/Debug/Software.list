
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000790  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000850  08000850  00001850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000878  08000878  00001880  2**0
                  CONTENTS
  4 .ARM          00000000  08000878  08000878  00001880  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000878  08000880  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000878  08000878  00001878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800087c  0800087c  0000187c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000880  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000880  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000069c  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000384  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  000022c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000094  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008511  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016a5  00000000  00000000  0000a94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002b849  00000000  00000000  0000bff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0003783b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  00037880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00037a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000838 	.word	0x08000838

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000838 	.word	0x08000838

08000108 <__divsi3>:
 8000108:	4603      	mov	r3, r0
 800010a:	430b      	orrs	r3, r1
 800010c:	d47f      	bmi.n	800020e <__divsi3+0x106>
 800010e:	2200      	movs	r2, #0
 8000110:	0843      	lsrs	r3, r0, #1
 8000112:	428b      	cmp	r3, r1
 8000114:	d374      	bcc.n	8000200 <__divsi3+0xf8>
 8000116:	0903      	lsrs	r3, r0, #4
 8000118:	428b      	cmp	r3, r1
 800011a:	d35f      	bcc.n	80001dc <__divsi3+0xd4>
 800011c:	0a03      	lsrs	r3, r0, #8
 800011e:	428b      	cmp	r3, r1
 8000120:	d344      	bcc.n	80001ac <__divsi3+0xa4>
 8000122:	0b03      	lsrs	r3, r0, #12
 8000124:	428b      	cmp	r3, r1
 8000126:	d328      	bcc.n	800017a <__divsi3+0x72>
 8000128:	0c03      	lsrs	r3, r0, #16
 800012a:	428b      	cmp	r3, r1
 800012c:	d30d      	bcc.n	800014a <__divsi3+0x42>
 800012e:	22ff      	movs	r2, #255	@ 0xff
 8000130:	0209      	lsls	r1, r1, #8
 8000132:	ba12      	rev	r2, r2
 8000134:	0c03      	lsrs	r3, r0, #16
 8000136:	428b      	cmp	r3, r1
 8000138:	d302      	bcc.n	8000140 <__divsi3+0x38>
 800013a:	1212      	asrs	r2, r2, #8
 800013c:	0209      	lsls	r1, r1, #8
 800013e:	d065      	beq.n	800020c <__divsi3+0x104>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d319      	bcc.n	800017a <__divsi3+0x72>
 8000146:	e000      	b.n	800014a <__divsi3+0x42>
 8000148:	0a09      	lsrs	r1, r1, #8
 800014a:	0bc3      	lsrs	r3, r0, #15
 800014c:	428b      	cmp	r3, r1
 800014e:	d301      	bcc.n	8000154 <__divsi3+0x4c>
 8000150:	03cb      	lsls	r3, r1, #15
 8000152:	1ac0      	subs	r0, r0, r3
 8000154:	4152      	adcs	r2, r2
 8000156:	0b83      	lsrs	r3, r0, #14
 8000158:	428b      	cmp	r3, r1
 800015a:	d301      	bcc.n	8000160 <__divsi3+0x58>
 800015c:	038b      	lsls	r3, r1, #14
 800015e:	1ac0      	subs	r0, r0, r3
 8000160:	4152      	adcs	r2, r2
 8000162:	0b43      	lsrs	r3, r0, #13
 8000164:	428b      	cmp	r3, r1
 8000166:	d301      	bcc.n	800016c <__divsi3+0x64>
 8000168:	034b      	lsls	r3, r1, #13
 800016a:	1ac0      	subs	r0, r0, r3
 800016c:	4152      	adcs	r2, r2
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d301      	bcc.n	8000178 <__divsi3+0x70>
 8000174:	030b      	lsls	r3, r1, #12
 8000176:	1ac0      	subs	r0, r0, r3
 8000178:	4152      	adcs	r2, r2
 800017a:	0ac3      	lsrs	r3, r0, #11
 800017c:	428b      	cmp	r3, r1
 800017e:	d301      	bcc.n	8000184 <__divsi3+0x7c>
 8000180:	02cb      	lsls	r3, r1, #11
 8000182:	1ac0      	subs	r0, r0, r3
 8000184:	4152      	adcs	r2, r2
 8000186:	0a83      	lsrs	r3, r0, #10
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__divsi3+0x88>
 800018c:	028b      	lsls	r3, r1, #10
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0a43      	lsrs	r3, r0, #9
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__divsi3+0x94>
 8000198:	024b      	lsls	r3, r1, #9
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__divsi3+0xa0>
 80001a4:	020b      	lsls	r3, r1, #8
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	d2cd      	bcs.n	8000148 <__divsi3+0x40>
 80001ac:	09c3      	lsrs	r3, r0, #7
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__divsi3+0xae>
 80001b2:	01cb      	lsls	r3, r1, #7
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0983      	lsrs	r3, r0, #6
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__divsi3+0xba>
 80001be:	018b      	lsls	r3, r1, #6
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0943      	lsrs	r3, r0, #5
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__divsi3+0xc6>
 80001ca:	014b      	lsls	r3, r1, #5
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0903      	lsrs	r3, r0, #4
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__divsi3+0xd2>
 80001d6:	010b      	lsls	r3, r1, #4
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	08c3      	lsrs	r3, r0, #3
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__divsi3+0xde>
 80001e2:	00cb      	lsls	r3, r1, #3
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0883      	lsrs	r3, r0, #2
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__divsi3+0xea>
 80001ee:	008b      	lsls	r3, r1, #2
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	0843      	lsrs	r3, r0, #1
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__divsi3+0xf6>
 80001fa:	004b      	lsls	r3, r1, #1
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	1a41      	subs	r1, r0, r1
 8000202:	d200      	bcs.n	8000206 <__divsi3+0xfe>
 8000204:	4601      	mov	r1, r0
 8000206:	4152      	adcs	r2, r2
 8000208:	4610      	mov	r0, r2
 800020a:	4770      	bx	lr
 800020c:	e05d      	b.n	80002ca <__divsi3+0x1c2>
 800020e:	0fca      	lsrs	r2, r1, #31
 8000210:	d000      	beq.n	8000214 <__divsi3+0x10c>
 8000212:	4249      	negs	r1, r1
 8000214:	1003      	asrs	r3, r0, #32
 8000216:	d300      	bcc.n	800021a <__divsi3+0x112>
 8000218:	4240      	negs	r0, r0
 800021a:	4053      	eors	r3, r2
 800021c:	2200      	movs	r2, #0
 800021e:	469c      	mov	ip, r3
 8000220:	0903      	lsrs	r3, r0, #4
 8000222:	428b      	cmp	r3, r1
 8000224:	d32d      	bcc.n	8000282 <__divsi3+0x17a>
 8000226:	0a03      	lsrs	r3, r0, #8
 8000228:	428b      	cmp	r3, r1
 800022a:	d312      	bcc.n	8000252 <__divsi3+0x14a>
 800022c:	22fc      	movs	r2, #252	@ 0xfc
 800022e:	0189      	lsls	r1, r1, #6
 8000230:	ba12      	rev	r2, r2
 8000232:	0a03      	lsrs	r3, r0, #8
 8000234:	428b      	cmp	r3, r1
 8000236:	d30c      	bcc.n	8000252 <__divsi3+0x14a>
 8000238:	0189      	lsls	r1, r1, #6
 800023a:	1192      	asrs	r2, r2, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d308      	bcc.n	8000252 <__divsi3+0x14a>
 8000240:	0189      	lsls	r1, r1, #6
 8000242:	1192      	asrs	r2, r2, #6
 8000244:	428b      	cmp	r3, r1
 8000246:	d304      	bcc.n	8000252 <__divsi3+0x14a>
 8000248:	0189      	lsls	r1, r1, #6
 800024a:	d03a      	beq.n	80002c2 <__divsi3+0x1ba>
 800024c:	1192      	asrs	r2, r2, #6
 800024e:	e000      	b.n	8000252 <__divsi3+0x14a>
 8000250:	0989      	lsrs	r1, r1, #6
 8000252:	09c3      	lsrs	r3, r0, #7
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__divsi3+0x154>
 8000258:	01cb      	lsls	r3, r1, #7
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0983      	lsrs	r3, r0, #6
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x160>
 8000264:	018b      	lsls	r3, r1, #6
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0943      	lsrs	r3, r0, #5
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x16c>
 8000270:	014b      	lsls	r3, r1, #5
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x178>
 800027c:	010b      	lsls	r3, r1, #4
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	08c3      	lsrs	r3, r0, #3
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x184>
 8000288:	00cb      	lsls	r3, r1, #3
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0883      	lsrs	r3, r0, #2
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x190>
 8000294:	008b      	lsls	r3, r1, #2
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	d2d9      	bcs.n	8000250 <__divsi3+0x148>
 800029c:	0843      	lsrs	r3, r0, #1
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__divsi3+0x19e>
 80002a2:	004b      	lsls	r3, r1, #1
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	1a41      	subs	r1, r0, r1
 80002aa:	d200      	bcs.n	80002ae <__divsi3+0x1a6>
 80002ac:	4601      	mov	r1, r0
 80002ae:	4663      	mov	r3, ip
 80002b0:	4152      	adcs	r2, r2
 80002b2:	105b      	asrs	r3, r3, #1
 80002b4:	4610      	mov	r0, r2
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x1b4>
 80002b8:	4240      	negs	r0, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d500      	bpl.n	80002c0 <__divsi3+0x1b8>
 80002be:	4249      	negs	r1, r1
 80002c0:	4770      	bx	lr
 80002c2:	4663      	mov	r3, ip
 80002c4:	105b      	asrs	r3, r3, #1
 80002c6:	d300      	bcc.n	80002ca <__divsi3+0x1c2>
 80002c8:	4240      	negs	r0, r0
 80002ca:	b501      	push	{r0, lr}
 80002cc:	2000      	movs	r0, #0
 80002ce:	f000 f805 	bl	80002dc <__aeabi_idiv0>
 80002d2:	bd02      	pop	{r1, pc}

080002d4 <__aeabi_idivmod>:
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d0f8      	beq.n	80002ca <__divsi3+0x1c2>
 80002d8:	e716      	b.n	8000108 <__divsi3>
 80002da:	4770      	bx	lr

080002dc <__aeabi_idiv0>:
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <LCD_Command>:

#include "defines.h"
#include "delay.h"
#include "LCD.h"

void LCD_Command(unsigned char cmd){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
	 //Envia nibble alto
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80002ec:	4b3d      	ldr	r3, [pc, #244]	@ (80003e4 <LCD_Command+0x104>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	228b      	movs	r2, #139	@ 0x8b
 80002f2:	4393      	bics	r3, r2
 80002f4:	001a      	movs	r2, r3
			 (((cmd >> 4) & 0x01) << 0) |
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	091b      	lsrs	r3, r3, #4
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	0019      	movs	r1, r3
 8000300:	2301      	movs	r3, #1
 8000302:	400b      	ands	r3, r1
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 8000304:	431a      	orrs	r2, r3
	         (((cmd >> 5) & 0x01) << 1) |
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	095b      	lsrs	r3, r3, #5
 800030c:	b2db      	uxtb	r3, r3
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	2102      	movs	r1, #2
 8000312:	400b      	ands	r3, r1
			 (((cmd >> 4) & 0x01) << 0) |
 8000314:	431a      	orrs	r2, r3
	         (((cmd >> 6) & 0x01) << 7) |
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	099b      	lsrs	r3, r3, #6
 800031c:	b2db      	uxtb	r3, r3
 800031e:	01db      	lsls	r3, r3, #7
 8000320:	21ff      	movs	r1, #255	@ 0xff
 8000322:	400b      	ands	r3, r1
	         (((cmd >> 5) & 0x01) << 1) |
 8000324:	431a      	orrs	r2, r3
 8000326:	0011      	movs	r1, r2
	         (((cmd >> 7) & 0x01) << 3);
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	09db      	lsrs	r3, r3, #7
 800032e:	b2db      	uxtb	r3, r3
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	2208      	movs	r2, #8
 8000334:	401a      	ands	r2, r3
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 8000336:	4b2b      	ldr	r3, [pc, #172]	@ (80003e4 <LCD_Command+0x104>)
	         (((cmd >> 6) & 0x01) << 7) |
 8000338:	430a      	orrs	r2, r1
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 800033a:	615a      	str	r2, [r3, #20]

	 RS_LOW();
 800033c:	4b29      	ldr	r3, [pc, #164]	@ (80003e4 <LCD_Command+0x104>)
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	4b28      	ldr	r3, [pc, #160]	@ (80003e4 <LCD_Command+0x104>)
 8000342:	2110      	movs	r1, #16
 8000344:	438a      	bics	r2, r1
 8000346:	615a      	str	r2, [r3, #20]
	 E_HIGH();
 8000348:	4b26      	ldr	r3, [pc, #152]	@ (80003e4 <LCD_Command+0x104>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	4b25      	ldr	r3, [pc, #148]	@ (80003e4 <LCD_Command+0x104>)
 800034e:	2120      	movs	r1, #32
 8000350:	430a      	orrs	r2, r1
 8000352:	615a      	str	r2, [r3, #20]
	 Delay_ms(1);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 f9bf 	bl	80006d8 <Delay_ms>
	 E_LOW();
 800035a:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <LCD_Command+0x104>)
 800035c:	695a      	ldr	r2, [r3, #20]
 800035e:	4b21      	ldr	r3, [pc, #132]	@ (80003e4 <LCD_Command+0x104>)
 8000360:	2120      	movs	r1, #32
 8000362:	438a      	bics	r2, r1
 8000364:	615a      	str	r2, [r3, #20]
	 Delay_ms(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 f9b6 	bl	80006d8 <Delay_ms>

	 //Envia nibble baixo
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 800036c:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <LCD_Command+0x104>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	228b      	movs	r2, #139	@ 0x8b
 8000372:	4393      	bics	r3, r2
 8000374:	001a      	movs	r2, r3
			 (((cmd >> 0) & 0x01) << 0) |
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2101      	movs	r1, #1
 800037c:	400b      	ands	r3, r1
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 800037e:	431a      	orrs	r2, r3
	         (((cmd >> 1) & 0x01) << 1) |
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	085b      	lsrs	r3, r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	2102      	movs	r1, #2
 800038c:	400b      	ands	r3, r1
			 (((cmd >> 0) & 0x01) << 0) |
 800038e:	431a      	orrs	r2, r3
	         (((cmd >> 2) & 0x01) << 7) |
 8000390:	1dfb      	adds	r3, r7, #7
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	089b      	lsrs	r3, r3, #2
 8000396:	b2db      	uxtb	r3, r3
 8000398:	01db      	lsls	r3, r3, #7
 800039a:	21ff      	movs	r1, #255	@ 0xff
 800039c:	400b      	ands	r3, r1
	         (((cmd >> 1) & 0x01) << 1) |
 800039e:	431a      	orrs	r2, r3
 80003a0:	0011      	movs	r1, r2
	         (((cmd >> 3) & 0x01) << 3);
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	08db      	lsrs	r3, r3, #3
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	2208      	movs	r2, #8
 80003ae:	401a      	ands	r2, r3
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <LCD_Command+0x104>)
	         (((cmd >> 2) & 0x01) << 7) |
 80003b2:	430a      	orrs	r2, r1
	 GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80003b4:	615a      	str	r2, [r3, #20]

	 E_HIGH();
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <LCD_Command+0x104>)
 80003b8:	695a      	ldr	r2, [r3, #20]
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <LCD_Command+0x104>)
 80003bc:	2120      	movs	r1, #32
 80003be:	430a      	orrs	r2, r1
 80003c0:	615a      	str	r2, [r3, #20]
	 Delay_ms(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 f988 	bl	80006d8 <Delay_ms>
	 E_LOW();
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <LCD_Command+0x104>)
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <LCD_Command+0x104>)
 80003ce:	2120      	movs	r1, #32
 80003d0:	438a      	bics	r2, r1
 80003d2:	615a      	str	r2, [r3, #20]
	 Delay_ms(3);
 80003d4:	2003      	movs	r0, #3
 80003d6:	f000 f97f 	bl	80006d8 <Delay_ms>
}
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	48000400 	.word	0x48000400

080003e8 <LCD_Init>:

void LCD_Init(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	Delay_ms(40);
 80003ec:	2028      	movs	r0, #40	@ 0x28
 80003ee:	f000 f973 	bl	80006d8 <Delay_ms>
	LCD_Command(0x02);												//Configura o LCD para modo de 4 bits.
 80003f2:	2002      	movs	r0, #2
 80003f4:	f7ff ff74 	bl	80002e0 <LCD_Command>
	LCD_Command(0x28);												//Configura o LCD para 2 linhas e matriz de 5x8 pontos.
 80003f8:	2028      	movs	r0, #40	@ 0x28
 80003fa:	f7ff ff71 	bl	80002e0 <LCD_Command>
	LCD_Command(0x01);												//Limpa o display
 80003fe:	2001      	movs	r0, #1
 8000400:	f7ff ff6e 	bl	80002e0 <LCD_Command>
	LCD_Command(0x0C);												//Liga o display e desliga o cursor.
 8000404:	200c      	movs	r0, #12
 8000406:	f7ff ff6b 	bl	80002e0 <LCD_Command>
	LCD_Command(0x06);												//Configura o incremento automático do cursor.
 800040a:	2006      	movs	r0, #6
 800040c:	f7ff ff68 	bl	80002e0 <LCD_Command>
}
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <LCD_Char>:

void LCD_Char(char dat){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	//Envia nibble alto
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 8000424:	4b3d      	ldr	r3, [pc, #244]	@ (800051c <LCD_Char+0x104>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	228b      	movs	r2, #139	@ 0x8b
 800042a:	4393      	bics	r3, r2
 800042c:	001a      	movs	r2, r3
			(((dat >> 4) & 0x01) << 0) |
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	091b      	lsrs	r3, r3, #4
 8000434:	b2db      	uxtb	r3, r3
 8000436:	0019      	movs	r1, r3
 8000438:	2301      	movs	r3, #1
 800043a:	400b      	ands	r3, r1
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 800043c:	431a      	orrs	r2, r3
		    (((dat >> 5) & 0x01) << 1) |
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	095b      	lsrs	r3, r3, #5
 8000444:	b2db      	uxtb	r3, r3
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2102      	movs	r1, #2
 800044a:	400b      	ands	r3, r1
			(((dat >> 4) & 0x01) << 0) |
 800044c:	431a      	orrs	r2, r3
		    (((dat >> 6) & 0x01) << 7) |
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	099b      	lsrs	r3, r3, #6
 8000454:	b2db      	uxtb	r3, r3
 8000456:	01db      	lsls	r3, r3, #7
 8000458:	21ff      	movs	r1, #255	@ 0xff
 800045a:	400b      	ands	r3, r1
		    (((dat >> 5) & 0x01) << 1) |
 800045c:	431a      	orrs	r2, r3
 800045e:	0011      	movs	r1, r2
		    (((dat >> 7) & 0x01) << 3);
 8000460:	1dfb      	adds	r3, r7, #7
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	09db      	lsrs	r3, r3, #7
 8000466:	b2db      	uxtb	r3, r3
 8000468:	00db      	lsls	r3, r3, #3
 800046a:	2208      	movs	r2, #8
 800046c:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 800046e:	4b2b      	ldr	r3, [pc, #172]	@ (800051c <LCD_Char+0x104>)
		    (((dat >> 6) & 0x01) << 7) |
 8000470:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 8000472:	615a      	str	r2, [r3, #20]
	RS_HIGH();
 8000474:	4b29      	ldr	r3, [pc, #164]	@ (800051c <LCD_Char+0x104>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	4b28      	ldr	r3, [pc, #160]	@ (800051c <LCD_Char+0x104>)
 800047a:	2110      	movs	r1, #16
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
	E_HIGH();
 8000480:	4b26      	ldr	r3, [pc, #152]	@ (800051c <LCD_Char+0x104>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	4b25      	ldr	r3, [pc, #148]	@ (800051c <LCD_Char+0x104>)
 8000486:	2120      	movs	r1, #32
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
	Delay_ms(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f000 f923 	bl	80006d8 <Delay_ms>
	E_LOW();
 8000492:	4b22      	ldr	r3, [pc, #136]	@ (800051c <LCD_Char+0x104>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b21      	ldr	r3, [pc, #132]	@ (800051c <LCD_Char+0x104>)
 8000498:	2120      	movs	r1, #32
 800049a:	438a      	bics	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
	Delay_ms(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 f91a 	bl	80006d8 <Delay_ms>

	//Envia nibble baixo
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80004a4:	4b1d      	ldr	r3, [pc, #116]	@ (800051c <LCD_Char+0x104>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	228b      	movs	r2, #139	@ 0x8b
 80004aa:	4393      	bics	r3, r2
 80004ac:	001a      	movs	r2, r3
			(((dat >> 0) & 0x01) << 0) |
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2101      	movs	r1, #1
 80004b4:	400b      	ands	r3, r1
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80004b6:	431a      	orrs	r2, r3
		    (((dat >> 1) & 0x01) << 1) |
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	085b      	lsrs	r3, r3, #1
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	2102      	movs	r1, #2
 80004c4:	400b      	ands	r3, r1
			(((dat >> 0) & 0x01) << 0) |
 80004c6:	431a      	orrs	r2, r3
		    (((dat >> 2) & 0x01) << 7) |
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	089b      	lsrs	r3, r3, #2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	01db      	lsls	r3, r3, #7
 80004d2:	21ff      	movs	r1, #255	@ 0xff
 80004d4:	400b      	ands	r3, r1
		    (((dat >> 1) & 0x01) << 1) |
 80004d6:	431a      	orrs	r2, r3
 80004d8:	0011      	movs	r1, r2
		    (((dat >> 3) & 0x01) << 3);
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	2208      	movs	r2, #8
 80004e6:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <LCD_Char+0x104>)
		    (((dat >> 2) & 0x01) << 7) |
 80004ea:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & ~(GPIO_ODR_0 | GPIO_ODR_1 | GPIO_ODR_3 | GPIO_ODR_7)) |
 80004ec:	615a      	str	r2, [r3, #20]
	E_HIGH();
 80004ee:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <LCD_Char+0x104>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <LCD_Char+0x104>)
 80004f4:	2120      	movs	r1, #32
 80004f6:	430a      	orrs	r2, r1
 80004f8:	615a      	str	r2, [r3, #20]
	Delay_ms(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 f8ec 	bl	80006d8 <Delay_ms>
	E_LOW();
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <LCD_Char+0x104>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <LCD_Char+0x104>)
 8000506:	2120      	movs	r1, #32
 8000508:	438a      	bics	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
	Delay_ms(3);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8e3 	bl	80006d8 <Delay_ms>
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	48000400 	.word	0x48000400

08000520 <LCD_String>:
           break;
    }
    LCD_Char(dat);
}

void LCD_String(const char *msg){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	while((*msg)!=0){
 8000528:	e007      	b.n	800053a <LCD_String+0x1a>
		LCD_Char(*msg);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff72 	bl	8000418 <LCD_Char>
	    msg++;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	while((*msg)!=0){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1f3      	bne.n	800052a <LCD_String+0xa>
	}
}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LCD_String_xy>:

void LCD_String_xy(char row,char pos,const char *msg){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	603a      	str	r2, [r7, #0]
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	1c02      	adds	r2, r0, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	1dbb      	adds	r3, r7, #6
 800055c:	1c0a      	adds	r2, r1, #0
 800055e:	701a      	strb	r2, [r3, #0]
	unsigned  char location=0;
 8000560:	230f      	movs	r3, #15
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]

	switch (row){
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d02c      	beq.n	80005ca <LCD_String_xy+0x7e>
 8000570:	dc37      	bgt.n	80005e2 <LCD_String_xy+0x96>
 8000572:	2b02      	cmp	r3, #2
 8000574:	d01d      	beq.n	80005b2 <LCD_String_xy+0x66>
 8000576:	dc34      	bgt.n	80005e2 <LCD_String_xy+0x96>
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <LCD_String_xy+0x36>
 800057c:	2b01      	cmp	r3, #1
 800057e:	d00c      	beq.n	800059a <LCD_String_xy+0x4e>
 8000580:	e02f      	b.n	80005e2 <LCD_String_xy+0x96>
		case 0:
			location=(unsigned char)((0x80) + (pos));
 8000582:	210f      	movs	r1, #15
 8000584:	187b      	adds	r3, r7, r1
 8000586:	1dba      	adds	r2, r7, #6
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	3a80      	subs	r2, #128	@ 0x80
 800058c:	701a      	strb	r2, [r3, #0]
	        LCD_Command(location);
 800058e:	187b      	adds	r3, r7, r1
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff fea4 	bl	80002e0 <LCD_Command>
	        break;
 8000598:	e023      	b.n	80005e2 <LCD_String_xy+0x96>
	    case 1:
	        location=(unsigned char)((0xC0) + (pos));
 800059a:	210f      	movs	r1, #15
 800059c:	187b      	adds	r3, r7, r1
 800059e:	1dba      	adds	r2, r7, #6
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	3a40      	subs	r2, #64	@ 0x40
 80005a4:	701a      	strb	r2, [r3, #0]
	        LCD_Command(location);
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fe98 	bl	80002e0 <LCD_Command>
	        break;
 80005b0:	e017      	b.n	80005e2 <LCD_String_xy+0x96>
	    case 2:
	    	location=(unsigned char)((0x94) + (pos));
 80005b2:	210f      	movs	r1, #15
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	1dba      	adds	r2, r7, #6
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	3a6c      	subs	r2, #108	@ 0x6c
 80005bc:	701a      	strb	r2, [r3, #0]
	        LCD_Command(location);
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff fe8c 	bl	80002e0 <LCD_Command>
	        break;
 80005c8:	e00b      	b.n	80005e2 <LCD_String_xy+0x96>
	    case 3:
	        location=(unsigned char)((0xD4) + (pos));
 80005ca:	210f      	movs	r1, #15
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	1dba      	adds	r2, r7, #6
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	3a2c      	subs	r2, #44	@ 0x2c
 80005d4:	701a      	strb	r2, [r3, #0]
	        LCD_Command(location);
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff fe80 	bl	80002e0 <LCD_Command>
	        break;
 80005e0:	46c0      	nop			@ (mov r8, r8)
	}
	LCD_String(msg);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ff9b 	bl	8000520 <LCD_String>
}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b004      	add	sp, #16
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <LCD_Clear>:

void LCD_Clear(void){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
	LCD_Command(0x01);												//Limpa o display
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fe72 	bl	80002e0 <LCD_Command>
	Delay_ms(3);													//Atraso 3ms
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 f86b 	bl	80006d8 <Delay_ms>
}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Osc_Init>:
#include "stm32f030x6.h"
#include "configs.h"

void Osc_Init(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//Ativa o HSE (Cristal Externo de 8 MHz)
	RCC->CR |= RCC_CR_HSEON;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <Osc_Init+0x44>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <Osc_Init+0x44>)
 8000612:	2180      	movs	r1, #128	@ 0x80
 8000614:	0249      	lsls	r1, r1, #9
 8000616:	430a      	orrs	r2, r1
 8000618:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); 							//Espera até o HSE ficar pronto
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <Osc_Init+0x44>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	2380      	movs	r3, #128	@ 0x80
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
 8000626:	d0f9      	beq.n	800061c <Osc_Init+0x14>

	//Seleciona o HSE como o clock do sistema
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <Osc_Init+0x44>)
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <Osc_Init+0x44>)
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE); 		//Espera até o HSE ser selecionado
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	4b05      	ldr	r3, [pc, #20]	@ (800064c <Osc_Init+0x44>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	220c      	movs	r2, #12
 800063c:	4013      	ands	r3, r2
 800063e:	2b04      	cmp	r3, #4
 8000640:	d1f9      	bne.n	8000636 <Osc_Init+0x2e>
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <GPIO>:

void GPIO(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <GPIO+0x70>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <GPIO+0x70>)
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	02c9      	lsls	r1, r1, #11
 800065e:	430a      	orrs	r2, r1
 8000660:	615a      	str	r2, [r3, #20]

	//Configura PB0, PB1, PB3, PB7 como saída (modo geral push-pull)
	GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER3 | GPIO_MODER_MODER7);
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <GPIO+0x74>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <GPIO+0x74>)
 8000668:	4917      	ldr	r1, [pc, #92]	@ (80006c8 <GPIO+0x78>)
 800066a:	400a      	ands	r2, r1
 800066c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER7_0);
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <GPIO+0x74>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <GPIO+0x74>)
 8000674:	4915      	ldr	r1, [pc, #84]	@ (80006cc <GPIO+0x7c>)
 8000676:	430a      	orrs	r2, r1
 8000678:	601a      	str	r2, [r3, #0]

	//Configura PB4 (RS) e PB5 (EN) como saída
	GPIOB->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <GPIO+0x74>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <GPIO+0x74>)
 8000680:	4913      	ldr	r1, [pc, #76]	@ (80006d0 <GPIO+0x80>)
 8000682:	400a      	ands	r2, r1
 8000684:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <GPIO+0x74>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <GPIO+0x74>)
 800068c:	21a0      	movs	r1, #160	@ 0xa0
 800068e:	00c9      	lsls	r1, r1, #3
 8000690:	430a      	orrs	r2, r1
 8000692:	601a      	str	r2, [r3, #0]

	//Configura os pinos como push-pull com velocidade baixa
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_0 | GPIO_OTYPER_OT_1 | GPIO_OTYPER_OT_3 | GPIO_OTYPER_OT_7 |
 8000694:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <GPIO+0x74>)
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <GPIO+0x74>)
 800069a:	21bb      	movs	r1, #187	@ 0xbb
 800069c:	438a      	bics	r2, r1
 800069e:	605a      	str	r2, [r3, #4]
	             	 GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5);
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 | GPIO_OSPEEDER_OSPEEDR1 | GPIO_OSPEEDER_OSPEEDR3 |
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <GPIO+0x74>)
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <GPIO+0x74>)
 80006a6:	490b      	ldr	r1, [pc, #44]	@ (80006d4 <GPIO+0x84>)
 80006a8:	400a      	ands	r2, r1
 80006aa:	609a      	str	r2, [r3, #8]
	                 GPIO_OSPEEDER_OSPEEDR7 | GPIO_OSPEEDER_OSPEEDR4 | GPIO_OSPEEDER_OSPEEDR5);

	//Desabilita pull-up/pull-down nos pinos
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0 | GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR3 | GPIO_PUPDR_PUPDR7 |
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <GPIO+0x74>)
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <GPIO+0x74>)
 80006b2:	4908      	ldr	r1, [pc, #32]	@ (80006d4 <GPIO+0x84>)
 80006b4:	400a      	ands	r2, r1
 80006b6:	60da      	str	r2, [r3, #12]
	                 GPIO_PUPDR_PUPDR4 | GPIO_PUPDR_PUPDR5);
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000400 	.word	0x48000400
 80006c8:	ffff3f30 	.word	0xffff3f30
 80006cc:	00004045 	.word	0x00004045
 80006d0:	fffff0ff 	.word	0xfffff0ff
 80006d4:	ffff3030 	.word	0xffff3030

080006d8 <Delay_ms>:
#include "stm32f030x6.h"
#include "delay.h"

void Delay_ms(int Vezes){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	//Clock do sistema seja 8MHz
	int clock_freq = 8000000 / 8; 						//Frequência após o prescaler (1:8)
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <Delay_ms+0x60>)
 80006e2:	60bb      	str	r3, [r7, #8]
	int Ticks = (clock_freq / 1000) * Vezes; 				//Calcula ticks para milissegundos
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	22fa      	movs	r2, #250	@ 0xfa
 80006e8:	0091      	lsls	r1, r2, #2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fd0c 	bl	8000108 <__divsi3>
 80006f0:	0003      	movs	r3, r0
 80006f2:	001a      	movs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4353      	muls	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]

	if (Ticks > 0xFFFFFF) Ticks = 0xFFFFFF;  				//Limita ao valor máximo de 24 bits
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	045b      	lsls	r3, r3, #17
 8000700:	429a      	cmp	r2, r3
 8000702:	db01      	blt.n	8000708 <Delay_ms+0x30>
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <Delay_ms+0x64>)
 8000706:	60fb      	str	r3, [r7, #12]

	SysTick->LOAD = Ticks - 1;               				//Carrega o valor de Ticks
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	1e5a      	subs	r2, r3, #1
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <Delay_ms+0x68>)
 800070e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;                        				//Limpa o valor atual do contador
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <Delay_ms+0x68>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk; 				//Habilita o SysTick
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <Delay_ms+0x68>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]

	//Espera o tempo terminar
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <Delay_ms+0x68>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	025b      	lsls	r3, r3, #9
 8000726:	4013      	ands	r3, r2
 8000728:	d0f9      	beq.n	800071e <Delay_ms+0x46>

	SysTick->CTRL = 0; 							//Desabilita o SysTick
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <Delay_ms+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b004      	add	sp, #16
 8000736:	bd80      	pop	{r7, pc}
 8000738:	000f4240 	.word	0x000f4240
 800073c:	00ffffff 	.word	0x00ffffff
 8000740:	e000e010 	.word	0xe000e010

08000744 <main>:
#include "configs.h"
#include "defines.h"
#include "delay.h"
#include "LCD.h"

int main(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	Osc_Init();
 8000748:	f7ff ff5e 	bl	8000608 <Osc_Init>
	GPIO();
 800074c:	f7ff ff80 	bl	8000650 <GPIO>
	LCD_Init();
 8000750:	f7ff fe4a 	bl	80003e8 <LCD_Init>
	LCD_Clear();
 8000754:	f7ff ff4d 	bl	80005f2 <LCD_Clear>
	LCD_String_xy(1,4,"INICIANDO...");
 8000758:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <main+0x4c>)
 800075a:	001a      	movs	r2, r3
 800075c:	2104      	movs	r1, #4
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fef4 	bl	800054c <LCD_String_xy>
	Delay_ms(1000);
 8000764:	23fa      	movs	r3, #250	@ 0xfa
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff ffb5 	bl	80006d8 <Delay_ms>
	LCD_Clear();
 800076e:	f7ff ff40 	bl	80005f2 <LCD_Clear>

	while(1){
		LCD_String_xy(0,0,"TESTE");
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <main+0x50>)
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff fee7 	bl	800054c <LCD_String_xy>
		LCD_String_xy(1,0,"STM32F030K6T6");
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <main+0x54>)
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fee1 	bl	800054c <LCD_String_xy>
		LCD_String_xy(0,0,"TESTE");
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	e7f1      	b.n	8000772 <main+0x2e>
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	08000850 	.word	0x08000850
 8000794:	08000860 	.word	0x08000860
 8000798:	08000868 	.word	0x08000868

0800079c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a0:	e000      	b.n	80007a4 <Reset_Handler+0x8>
 80007a2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	@ (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	@ (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ca:	f000 f811 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff ffb9 	bl	8000744 <main>

080007d2 <LoopForever>:

LoopForever:
  b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   r0, =_estack
 80007d4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007e0:	08000880 	.word	0x08000880
  ldr r2, =_sbss
 80007e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007e8:	2000001c 	.word	0x2000001c

080007ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC_IRQHandler>
	...

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	2600      	movs	r6, #0
 80007f4:	4c0c      	ldr	r4, [pc, #48]	@ (8000828 <__libc_init_array+0x38>)
 80007f6:	4d0d      	ldr	r5, [pc, #52]	@ (800082c <__libc_init_array+0x3c>)
 80007f8:	1b64      	subs	r4, r4, r5
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	42a6      	cmp	r6, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	2600      	movs	r6, #0
 8000802:	f000 f819 	bl	8000838 <_init>
 8000806:	4c0a      	ldr	r4, [pc, #40]	@ (8000830 <__libc_init_array+0x40>)
 8000808:	4d0a      	ldr	r5, [pc, #40]	@ (8000834 <__libc_init_array+0x44>)
 800080a:	1b64      	subs	r4, r4, r5
 800080c:	10a4      	asrs	r4, r4, #2
 800080e:	42a6      	cmp	r6, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	00b3      	lsls	r3, r6, #2
 8000816:	58eb      	ldr	r3, [r5, r3]
 8000818:	4798      	blx	r3
 800081a:	3601      	adds	r6, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	00b3      	lsls	r3, r6, #2
 8000820:	58eb      	ldr	r3, [r5, r3]
 8000822:	4798      	blx	r3
 8000824:	3601      	adds	r6, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08000878 	.word	0x08000878
 800082c:	08000878 	.word	0x08000878
 8000830:	0800087c 	.word	0x0800087c
 8000834:	08000878 	.word	0x08000878

08000838 <_init>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr

08000844 <_fini>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr
